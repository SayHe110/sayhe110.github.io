{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"be1b6bd88b172149871e9a685dbd15fd2dcc65c2","modified":1560004319993},{"_id":"themes/anatole/.gitignore","hash":"9fcbb05b158b5d3ba1ee60d38889e05e8b0f3f2a","modified":1560003162583},{"_id":"themes/anatole/README.md","hash":"88d58e69eda2435ce074bc6cafb1817346089a88","modified":1560003162583},{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1560003162583},{"_id":"themes/anatole/_config.sample.yml","hash":"53b519d1d9008f2ee8d055810133d0671968f3ca","modified":1560047053304},{"_id":"themes/anatole/package.json","hash":"cf731a3ebf3913747fccb6c4c6615eba7d7e88a4","modified":1560003162586},{"_id":"source/_posts/2018-年总结、回顾.md","hash":"1823681f77fdad581ba365e78b767df7e5906495","modified":1560064487004},{"_id":"source/_posts/Homestead-下切换-PHP-版本.md","hash":"fd4b410a2f5bc4200b16008fe30e27e9385cad28","modified":1560064131717},{"_id":"source/_posts/【外文翻译】使用-Laravel-时的一些小技巧.md","hash":"01056758efbb462f6f71023ba7e6d6fd9384cd39","modified":1560064439208},{"_id":"source/_posts/使用-Hexo-GitHub-构建个人博客.md","hash":"a59f291edf3ba000a8d677eb6b023eb106e6e366","modified":1560062679237},{"_id":"source/_posts/关于二维数组修改键值、sql-语句一对多查询的问题.md","hash":"a6c60c5f0c4f87b6a6fe652bde91ac0e0f3a97ff","modified":1560064192169},{"_id":"source/_posts/深入了解MySQL数据存储.md","hash":"35156e0b473033e82f1b7126afd01f3bc5b858be","modified":1560520882255},{"_id":"source/_posts/即将毕业的-phper-的自述.md","hash":"2217acaac87fb957b98443b1d636ff2ef77aa74e","modified":1560064087842},{"_id":"source/_posts/善于使用搜索引擎不好吗.md","hash":"cbe0c69764f823f2364c6412891d2d74cbd2b091","modified":1560063983226},{"_id":"source/_posts/如何搭建-RabbitMQ-至本地服务器.md","hash":"d001f7296fc2bf98f000228dccc3557d51872f29","modified":1560064234883},{"_id":"source/about/index.md","hash":"5a2bfba72358195d8445597b988dedbe0418300f","modified":1560065811244},{"_id":"source/archives/index.md","hash":"562c77950f07136b1335ae7d969dab0939a786ad","modified":1560046740015},{"_id":"source/self-talking/index.md","hash":"528bd216d9e68f21eafef5e078d114f220f7905e","modified":1560507509225},{"_id":"source/links/index.md","hash":"d7877662c00a8576a82e5648a52daa686cb65afd","modified":1560065882855},{"_id":"themes/anatole/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560003162577},{"_id":"themes/anatole/.git/config","hash":"831e9fdc6bb9fa56130a1292e248c5ad420f7229","modified":1560003162579},{"_id":"themes/anatole/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560003097245},{"_id":"themes/anatole/.git/index","hash":"5a4b8024c05eea312dbad63abe35680ebc993afb","modified":1560047620621},{"_id":"themes/anatole/.git/packed-refs","hash":"1b6b58240cb6ba507347e8f64e18aca873ba8cdd","modified":1560003162575},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1560003162584},{"_id":"themes/anatole/languages/pt-BR.yml","hash":"83e31abd9b3989143c1a6c11de87494c7a971d9d","modified":1560080452571},{"_id":"themes/anatole/layout/archive.pug","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1560003162584},{"_id":"themes/anatole/layout/category.pug","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1560003162584},{"_id":"themes/anatole/layout/index.pug","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1560003162584},{"_id":"themes/anatole/layout/mixins.pug","hash":"107bfd2fe10de0d8b110c13bb1168af79e62a37c","modified":1560003162584},{"_id":"themes/anatole/layout/page.pug","hash":"15142c94e5c2247aba8efb64cffd695b3f133670","modified":1560003162584},{"_id":"themes/anatole/layout/post.pug","hash":"012f8e272cf4713a0f08e3b702dab08ef6593b31","modified":1560003162585},{"_id":"themes/anatole/layout/tag.pug","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1560003162585},{"_id":"themes/anatole/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560003097245},{"_id":"themes/anatole/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560003097245},{"_id":"themes/anatole/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560003097246},{"_id":"themes/anatole/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560003097246},{"_id":"themes/anatole/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1560003097245},{"_id":"themes/anatole/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560003097245},{"_id":"themes/anatole/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560003097245},{"_id":"themes/anatole/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560003097246},{"_id":"themes/anatole/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560003097246},{"_id":"themes/anatole/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560003097246},{"_id":"themes/anatole/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560003097244},{"_id":"themes/anatole/.git/logs/HEAD","hash":"6fb09a23a331b695b44fa18641e0537364768691","modified":1560003162578},{"_id":"themes/anatole/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560003097246},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1560003162586},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1560003162586},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1560003162587},{"_id":"themes/anatole/source/css/style.css","hash":"bf0acea70e383c7d3f81de8f5838c505800672f8","modified":1560058218229},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1560003162587},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1560003162592},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1560003162592},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1560003162592},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1560003162593},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1560003162592},{"_id":"themes/anatole/layout/partial/comments.pug","hash":"fad5bbe7c2a134c892fcb1c731d979463145a49b","modified":1560003162585},{"_id":"themes/anatole/layout/partial/footer.pug","hash":"772f03a2dd9fa4fed422c4eb4d5d1ace84c65580","modified":1560003162585},{"_id":"themes/anatole/layout/partial/head.pug","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1560003162585},{"_id":"themes/anatole/layout/partial/layout.pug","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1560003162585},{"_id":"themes/anatole/layout/partial/nav.pug","hash":"061087e20ca69c5cfe6bb223bb4b095df90930f3","modified":1560506554920},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1560003162592},{"_id":"themes/anatole/layout/partial/sidebar.pug","hash":"84e182a275825136db9b7f322d266b19cdcfa3aa","modified":1560047541379},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1560003162589},{"_id":"themes/anatole/.git/objects/pack/pack-a1978a0c4fdc701078c675218192a7e6c7a709a9.idx","hash":"83fc4a0423ba57a9085d17b2fba48aa398682d8d","modified":1560003162569},{"_id":"themes/anatole/.git/refs/heads/master","hash":"925503d46c26d7a61b09317360241cba55ee3974","modified":1560003162578},{"_id":"themes/anatole/.git/logs/refs/heads/master","hash":"6fb09a23a331b695b44fa18641e0537364768691","modified":1560003162578},{"_id":"themes/anatole/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560003162577},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1560003162589},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1560003162594},{"_id":"themes/anatole/.git/logs/refs/remotes/origin/HEAD","hash":"6fb09a23a331b695b44fa18641e0537364768691","modified":1560003162577},{"_id":"themes/anatole/.git/objects/pack/pack-a1978a0c4fdc701078c675218192a7e6c7a709a9.pack","hash":"cc823f2dc8d86c0e30577338c3cc3ea9d580f312","modified":1560003162568},{"_id":"public/about/index.html","hash":"b269375b0f0d4b2ada28d4fa3b2030139efc7a06","modified":1560509139583},{"_id":"public/archives/index.html","hash":"b1078917fc389f89b6c087ce1225e736139f94b3","modified":1560520895692},{"_id":"public/self-talking/index.html","hash":"97a71cd01f390d23578686ecce4be406766d149e","modified":1560509139583},{"_id":"public/links/index.html","hash":"e457238c7e7479ffb91e46142b794833afd79023","modified":1560509139583},{"_id":"public/2019/06/08/使用-Hexo-GitHub-构建个人博客/index.html","hash":"6480d1bca27d750fb28f08e77ba8b7a48b517217","modified":1560520895715},{"_id":"public/2019/03/24/善于使用搜索引擎不好吗/index.html","hash":"f4e6b4b5da76541fd2be02e8c7b2a149f37fb19d","modified":1560509139583},{"_id":"public/2019/03/23/即将毕业的-phper-的自述/index.html","hash":"89afcd2c9c60a6036fe453ce3703ad98cb037acf","modified":1560509139584},{"_id":"public/2019/02/11/Homestead-下切换-PHP-版本/index.html","hash":"93bca1e685e783846a03447f764cab2019cc647d","modified":1560509139584},{"_id":"public/2019/01/01/2018-年总结、回顾/index.html","hash":"df852128707afbbfdc4840ff0e42034577a68cb0","modified":1560509139584},{"_id":"public/2018/12/27/关于二维数组修改键值、sql-语句一对多查询的问题/index.html","hash":"b3168dd3c1bce73eeac4373d1e4d2c4f2a65a40c","modified":1560509139584},{"_id":"public/2018/12/06/如何搭建-RabbitMQ-至本地服务器/index.html","hash":"ed2bd007d7797d0768f451397c689551a16f4d24","modified":1560509139584},{"_id":"public/index.html","hash":"1d37ac29977a6e4ee7b3c189b461689ec469bb5d","modified":1560520895715},{"_id":"public/2019/04/04/【外文翻译】使用-Laravel-时的一些小技巧/index.html","hash":"0bbbbb4b8e65e3846aa2d01610847ef50ded3ec3","modified":1560509139584},{"_id":"public/2019/06/14/深入了解MySQL数据存储/index.html","hash":"95ae7274eb4fb98f8e9ffe0318601a43af543ba3","modified":1560520895715},{"_id":"public/tags/数据库/index.html","hash":"d5eb5251eb19e8ff65e9b02f96993f843c319194","modified":1560520895715},{"_id":"public/CNAME","hash":"be1b6bd88b172149871e9a685dbd15fd2dcc65c2","modified":1560509139712},{"_id":"public/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1560509139712},{"_id":"public/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1560509139712},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1560509139712},{"_id":"public/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1560509139712},{"_id":"public/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1560509139714},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1560509139714},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1560509139717},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1560509139717},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1560509139718},{"_id":"public/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1560509139719},{"_id":"public/css/style.css","hash":"bf0acea70e383c7d3f81de8f5838c505800672f8","modified":1560509139719},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1560509139721},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1560509139722},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1560509139726}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2019-06-09T02:18:46.000Z","_content":"#### 这个站点是干啥的\n记录学习路程，留着以后看以前学习的过程，检验是否成长\n\n#### 我是谁\n一个走在码畜路上的仔 <br>\n我的 GitHub : https://github.com/SayHe110\n我的工作：目前就职于 [上海妙可科技有限公司](https://www.peilian.com/)\n\n#### What does this site do?\nRecord the learning journey, keep it for the future to see the previous learning process, and test whether it is growing or not.\n\n#### Who am i?\nChildren who write code <br>\n\nMy GitHub: https://github.com/SayHe110\n\nMy Job: Initiate in [上海妙可科技有限公司](https://www.peilian.com/)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-06-09 10:18:46\n---\n#### 这个站点是干啥的\n记录学习路程，留着以后看以前学习的过程，检验是否成长\n\n#### 我是谁\n一个走在码畜路上的仔 <br>\n我的 GitHub : https://github.com/SayHe110\n我的工作：目前就职于 [上海妙可科技有限公司](https://www.peilian.com/)\n\n#### What does this site do?\nRecord the learning journey, keep it for the future to see the previous learning process, and test whether it is growing or not.\n\n#### Who am i?\nChildren who write code <br>\n\nMy GitHub: https://github.com/SayHe110\n\nMy Job: Initiate in [上海妙可科技有限公司](https://www.peilian.com/)","updated":"2019-06-09T07:36:51.244Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwvyuld80001vizqds74ogaw","content":"<h4 id=\"这个站点是干啥的\"><a href=\"#这个站点是干啥的\" class=\"headerlink\" title=\"这个站点是干啥的\"></a>这个站点是干啥的</h4><p>记录学习路程，留着以后看以前学习的过程，检验是否成长</p>\n<h4 id=\"我是谁\"><a href=\"#我是谁\" class=\"headerlink\" title=\"我是谁\"></a>我是谁</h4><p>一个走在码畜路上的仔 <br><br>我的 GitHub : <a href=\"https://github.com/SayHe110\" target=\"_blank\" rel=\"noopener\">https://github.com/SayHe110</a><br>我的工作：目前就职于 <a href=\"https://www.peilian.com/\" target=\"_blank\" rel=\"noopener\">上海妙可科技有限公司</a></p>\n<h4 id=\"What-does-this-site-do\"><a href=\"#What-does-this-site-do\" class=\"headerlink\" title=\"What does this site do?\"></a>What does this site do?</h4><p>Record the learning journey, keep it for the future to see the previous learning process, and test whether it is growing or not.</p>\n<h4 id=\"Who-am-i\"><a href=\"#Who-am-i\" class=\"headerlink\" title=\"Who am i?\"></a>Who am i?</h4><p>Children who write code <br></p>\n<p>My GitHub: <a href=\"https://github.com/SayHe110\" target=\"_blank\" rel=\"noopener\">https://github.com/SayHe110</a></p>\n<p>My Job: Initiate in <a href=\"https://www.peilian.com/\" target=\"_blank\" rel=\"noopener\">上海妙可科技有限公司</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"这个站点是干啥的\"><a href=\"#这个站点是干啥的\" class=\"headerlink\" title=\"这个站点是干啥的\"></a>这个站点是干啥的</h4><p>记录学习路程，留着以后看以前学习的过程，检验是否成长</p>\n<h4 id=\"我是谁\"><a href=\"#我是谁\" class=\"headerlink\" title=\"我是谁\"></a>我是谁</h4><p>一个走在码畜路上的仔 <br><br>我的 GitHub : <a href=\"https://github.com/SayHe110\" target=\"_blank\" rel=\"noopener\">https://github.com/SayHe110</a><br>我的工作：目前就职于 <a href=\"https://www.peilian.com/\" target=\"_blank\" rel=\"noopener\">上海妙可科技有限公司</a></p>\n<h4 id=\"What-does-this-site-do\"><a href=\"#What-does-this-site-do\" class=\"headerlink\" title=\"What does this site do?\"></a>What does this site do?</h4><p>Record the learning journey, keep it for the future to see the previous learning process, and test whether it is growing or not.</p>\n<h4 id=\"Who-am-i\"><a href=\"#Who-am-i\" class=\"headerlink\" title=\"Who am i?\"></a>Who am i?</h4><p>Children who write code <br></p>\n<p>My GitHub: <a href=\"https://github.com/SayHe110\" target=\"_blank\" rel=\"noopener\">https://github.com/SayHe110</a></p>\n<p>My Job: Initiate in <a href=\"https://www.peilian.com/\" target=\"_blank\" rel=\"noopener\">上海妙可科技有限公司</a></p>\n"},{"title":"archives","date":"2019-06-09T02:18:59.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-06-09 10:18:59\n---\n","updated":"2019-06-09T02:19:00.015Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjwvyulds000cvizqld9pv1hw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"self-talking","date":"2019-06-14T10:00:58.000Z","summary":"编辑时倒序编辑","_content":"---\n#### 2019年06月14日18:13:55\nYou can't connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.\n坚持做自己喜欢的事，你在做的时候可能并不能搞清楚这些事儿对自己之后的人生有啥影响，但当你一路走来回头看时，一切都是那么清晰，就像是命中注定的一样。\n<p align=\"right\">—— 乔布斯 【摘自《MySQL是怎样运行的》】</p>\n","source":"self-talking/index.md","raw":"---\ntitle: self-talking\ndate: 2019-06-14 18:00:58\nsummary: 编辑时倒序编辑\n---\n---\n#### 2019年06月14日18:13:55\nYou can't connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.\n坚持做自己喜欢的事，你在做的时候可能并不能搞清楚这些事儿对自己之后的人生有啥影响，但当你一路走来回头看时，一切都是那么清晰，就像是命中注定的一样。\n<p align=\"right\">—— 乔布斯 【摘自《MySQL是怎样运行的》】</p>\n","updated":"2019-06-14T10:18:29.225Z","path":"self-talking/index.html","comments":1,"layout":"page","_id":"cjwvyuldt000dvizqon3473ch","content":"<hr>\n<h4 id=\"2019年06月14日18-13-55\"><a href=\"#2019年06月14日18-13-55\" class=\"headerlink\" title=\"2019年06月14日18:13:55\"></a>2019年06月14日18:13:55</h4><p>You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.<br>坚持做自己喜欢的事，你在做的时候可能并不能搞清楚这些事儿对自己之后的人生有啥影响，但当你一路走来回头看时，一切都是那么清晰，就像是命中注定的一样。</p>\n<p align=\"right\">—— 乔布斯 【摘自《MySQL是怎样运行的》】</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h4 id=\"2019年06月14日18-13-55\"><a href=\"#2019年06月14日18-13-55\" class=\"headerlink\" title=\"2019年06月14日18:13:55\"></a>2019年06月14日18:13:55</h4><p>You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future.You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.<br>坚持做自己喜欢的事，你在做的时候可能并不能搞清楚这些事儿对自己之后的人生有啥影响，但当你一路走来回头看时，一切都是那么清晰，就像是命中注定的一样。</p>\n<p align=\"right\">—— 乔布斯 【摘自《MySQL是怎样运行的》】</p>\n"},{"title":"links","date":"2019-06-09T02:21:00.000Z","_content":"> 若有大佬发现这站点，还想相互加入友情链接的，可以与我联系哦 949426374@qq.com","source":"links/index.md","raw":"---\ntitle: links\ndate: 2019-06-09 10:21:00\n---\n> 若有大佬发现这站点，还想相互加入友情链接的，可以与我联系哦 949426374@qq.com","updated":"2019-06-09T07:38:02.855Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjwvyuldt000evizq5wflmzwm","content":"<blockquote>\n<p>若有大佬发现这站点，还想相互加入友情链接的，可以与我联系哦 <a href=\"mailto:949426374@qq.com\" target=\"_blank\" rel=\"noopener\">949426374@qq.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>若有大佬发现这站点，还想相互加入友情链接的，可以与我联系哦 <a href=\"mailto:949426374@qq.com\" target=\"_blank\" rel=\"noopener\">949426374@qq.com</a></p>\n</blockquote>\n"}],"Post":[{"title":"2018 年总结、回顾","date":"2018-12-31T18:11:43.000Z","_content":"### 关于技术\n1. 技术的认知方面，相比较比年初、去年有了比较大的进步，在去年，我只知道学 `Laravle` 心里只想着，学好框架知识，就会很好的找到一个比较不错的工作，就能学好一门语言，现在想想那时还是太年轻。\n2. 技术的长进方面，今年是从学生转变成一个程序员的一段时间，也通过今年这段找工作时间，知道和别人的差距，知道自己的哪些不足，清楚未来的方向。\n3. 18 年也是对技术有一个新的认知的一年，从大二的时候，连写一个完整的后端代码都很困难，到现在信手拈来的代码逻辑，我觉得自己的技术和逻辑思维在这一年也是飞速的提升着。\n4. 从年中想除了学好 PHP 之外，还想继续学其他编程语言，到现在觉得掌握编程语言的本质才是最重要，编程语言不是最重要，就像编程语言和框架的关系。当然，我还是想了解学习 Go 这门语言，也许这门语言是未来的趋势。\n\n### 关于工作\n1. 今年的上半年还在学校无忧无虑的玩着，暑假就开始忙碌的找工作，到现在努力的适应工作环境，努力的从学生状态转换成程序员。\n2. 关于工作想讲的还是很多的，想从第一家实习公司开始说，第一家实习公司，那时是自己找工作的时候，想着有一份工作就不错了，但是入职后，很是后悔，不仅工资低，而且代码很古老，而且入职三个月什么都没学到，还不如现在公司一个月学到的东西多，但是在第一家公司的时候，自己学了点 vue 相关知识，只是停留在了解阶段。\n3. 今年还有一段时间处于找工作阶段，那段时间也算是狠补了一下基础知识。也是对自己的基础还是有很清楚的认知的，实在是太差了，哈哈，庆幸清醒的早啊。\n4. 现在的工作，有一个有经验的师傅带着，入职一个月真的学到了不少东西，现在公司用着流行的技术，还是能学到不少东西的，自己是有打算在这公司慢慢的干下去的念头。\n\n### 关于生活\n1. 今年算是很难受的一年，从学校刚出来的时候，因为旁边都是认识的同学，所以没什么不习惯，但是自己一个人去找工作的时候还是很不习惯的，因为自己性格的原因，总是融不到公司团体中，有时候也很想改变现状，但是有时候想想还是算了，其实内向的性格也能带来其他的好处。\n2. 代码技术真的充满了我生活的全部，白天工作写代码，晚上回来写些自己喜欢的技术，看些关于技术的书。\n\n### 关于书籍\n1. 今年从实习开始，就觉得得系统的学一下计算机方面的基础知识，只有基础知识牢固了才能更好的掌握编程语言。\n2. 买了很多，很多都没看，买了 kindle 但是也没完整的看完一本。\n\n### 2019\n1. 关于技术：不忘初心就好，认认真真学习，不要浪费一点时间，好好学自己喜欢的技术，希望 19 还是能认真的看完自己买的所有的书，打好自己的基础。\n2. 关于工作：19 年，也是我毕业的时候，根据我现在的想法，我是希望实习结束留下来继续工作的。\n3. 关于生活：还是希望自己在这一年能够脱单，不要再做单身🐶！！！还是希望自己有时间能出去转转，不要老是待在家里，还有就是希望自己能够多多运动，有个好的身体，才能更好的工作，才能玩自己喜欢的东西，做自己的大佬。\n\n\n> 文采有限，只是想记录一下而已，希望以后自己能在回来看看以前的自己的想法是怎样的，和看这篇文章的时候的自己有什么不一样，希望以这样的形式来记录自己的成长。","source":"_posts/2018-年总结、回顾.md","raw":"---\ntitle: 2018 年总结、回顾\ndate: 2019-01-01 02:11:43\ntags:\n---\n### 关于技术\n1. 技术的认知方面，相比较比年初、去年有了比较大的进步，在去年，我只知道学 `Laravle` 心里只想着，学好框架知识，就会很好的找到一个比较不错的工作，就能学好一门语言，现在想想那时还是太年轻。\n2. 技术的长进方面，今年是从学生转变成一个程序员的一段时间，也通过今年这段找工作时间，知道和别人的差距，知道自己的哪些不足，清楚未来的方向。\n3. 18 年也是对技术有一个新的认知的一年，从大二的时候，连写一个完整的后端代码都很困难，到现在信手拈来的代码逻辑，我觉得自己的技术和逻辑思维在这一年也是飞速的提升着。\n4. 从年中想除了学好 PHP 之外，还想继续学其他编程语言，到现在觉得掌握编程语言的本质才是最重要，编程语言不是最重要，就像编程语言和框架的关系。当然，我还是想了解学习 Go 这门语言，也许这门语言是未来的趋势。\n\n### 关于工作\n1. 今年的上半年还在学校无忧无虑的玩着，暑假就开始忙碌的找工作，到现在努力的适应工作环境，努力的从学生状态转换成程序员。\n2. 关于工作想讲的还是很多的，想从第一家实习公司开始说，第一家实习公司，那时是自己找工作的时候，想着有一份工作就不错了，但是入职后，很是后悔，不仅工资低，而且代码很古老，而且入职三个月什么都没学到，还不如现在公司一个月学到的东西多，但是在第一家公司的时候，自己学了点 vue 相关知识，只是停留在了解阶段。\n3. 今年还有一段时间处于找工作阶段，那段时间也算是狠补了一下基础知识。也是对自己的基础还是有很清楚的认知的，实在是太差了，哈哈，庆幸清醒的早啊。\n4. 现在的工作，有一个有经验的师傅带着，入职一个月真的学到了不少东西，现在公司用着流行的技术，还是能学到不少东西的，自己是有打算在这公司慢慢的干下去的念头。\n\n### 关于生活\n1. 今年算是很难受的一年，从学校刚出来的时候，因为旁边都是认识的同学，所以没什么不习惯，但是自己一个人去找工作的时候还是很不习惯的，因为自己性格的原因，总是融不到公司团体中，有时候也很想改变现状，但是有时候想想还是算了，其实内向的性格也能带来其他的好处。\n2. 代码技术真的充满了我生活的全部，白天工作写代码，晚上回来写些自己喜欢的技术，看些关于技术的书。\n\n### 关于书籍\n1. 今年从实习开始，就觉得得系统的学一下计算机方面的基础知识，只有基础知识牢固了才能更好的掌握编程语言。\n2. 买了很多，很多都没看，买了 kindle 但是也没完整的看完一本。\n\n### 2019\n1. 关于技术：不忘初心就好，认认真真学习，不要浪费一点时间，好好学自己喜欢的技术，希望 19 还是能认真的看完自己买的所有的书，打好自己的基础。\n2. 关于工作：19 年，也是我毕业的时候，根据我现在的想法，我是希望实习结束留下来继续工作的。\n3. 关于生活：还是希望自己在这一年能够脱单，不要再做单身🐶！！！还是希望自己有时间能出去转转，不要老是待在家里，还有就是希望自己能够多多运动，有个好的身体，才能更好的工作，才能玩自己喜欢的东西，做自己的大佬。\n\n\n> 文采有限，只是想记录一下而已，希望以后自己能在回来看看以前的自己的想法是怎样的，和看这篇文章的时候的自己有什么不一样，希望以这样的形式来记录自己的成长。","slug":"2018-年总结、回顾","published":1,"updated":"2019-06-09T07:14:47.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuld40000vizq33dsftzp","content":"<h3 id=\"关于技术\"><a href=\"#关于技术\" class=\"headerlink\" title=\"关于技术\"></a>关于技术</h3><ol>\n<li>技术的认知方面，相比较比年初、去年有了比较大的进步，在去年，我只知道学 <code>Laravle</code> 心里只想着，学好框架知识，就会很好的找到一个比较不错的工作，就能学好一门语言，现在想想那时还是太年轻。</li>\n<li>技术的长进方面，今年是从学生转变成一个程序员的一段时间，也通过今年这段找工作时间，知道和别人的差距，知道自己的哪些不足，清楚未来的方向。</li>\n<li>18 年也是对技术有一个新的认知的一年，从大二的时候，连写一个完整的后端代码都很困难，到现在信手拈来的代码逻辑，我觉得自己的技术和逻辑思维在这一年也是飞速的提升着。</li>\n<li>从年中想除了学好 PHP 之外，还想继续学其他编程语言，到现在觉得掌握编程语言的本质才是最重要，编程语言不是最重要，就像编程语言和框架的关系。当然，我还是想了解学习 Go 这门语言，也许这门语言是未来的趋势。</li>\n</ol>\n<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><ol>\n<li>今年的上半年还在学校无忧无虑的玩着，暑假就开始忙碌的找工作，到现在努力的适应工作环境，努力的从学生状态转换成程序员。</li>\n<li>关于工作想讲的还是很多的，想从第一家实习公司开始说，第一家实习公司，那时是自己找工作的时候，想着有一份工作就不错了，但是入职后，很是后悔，不仅工资低，而且代码很古老，而且入职三个月什么都没学到，还不如现在公司一个月学到的东西多，但是在第一家公司的时候，自己学了点 vue 相关知识，只是停留在了解阶段。</li>\n<li>今年还有一段时间处于找工作阶段，那段时间也算是狠补了一下基础知识。也是对自己的基础还是有很清楚的认知的，实在是太差了，哈哈，庆幸清醒的早啊。</li>\n<li>现在的工作，有一个有经验的师傅带着，入职一个月真的学到了不少东西，现在公司用着流行的技术，还是能学到不少东西的，自己是有打算在这公司慢慢的干下去的念头。</li>\n</ol>\n<h3 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h3><ol>\n<li>今年算是很难受的一年，从学校刚出来的时候，因为旁边都是认识的同学，所以没什么不习惯，但是自己一个人去找工作的时候还是很不习惯的，因为自己性格的原因，总是融不到公司团体中，有时候也很想改变现状，但是有时候想想还是算了，其实内向的性格也能带来其他的好处。</li>\n<li>代码技术真的充满了我生活的全部，白天工作写代码，晚上回来写些自己喜欢的技术，看些关于技术的书。</li>\n</ol>\n<h3 id=\"关于书籍\"><a href=\"#关于书籍\" class=\"headerlink\" title=\"关于书籍\"></a>关于书籍</h3><ol>\n<li>今年从实习开始，就觉得得系统的学一下计算机方面的基础知识，只有基础知识牢固了才能更好的掌握编程语言。</li>\n<li>买了很多，很多都没看，买了 kindle 但是也没完整的看完一本。</li>\n</ol>\n<h3 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h3><ol>\n<li>关于技术：不忘初心就好，认认真真学习，不要浪费一点时间，好好学自己喜欢的技术，希望 19 还是能认真的看完自己买的所有的书，打好自己的基础。</li>\n<li>关于工作：19 年，也是我毕业的时候，根据我现在的想法，我是希望实习结束留下来继续工作的。</li>\n<li>关于生活：还是希望自己在这一年能够脱单，不要再做单身🐶！！！还是希望自己有时间能出去转转，不要老是待在家里，还有就是希望自己能够多多运动，有个好的身体，才能更好的工作，才能玩自己喜欢的东西，做自己的大佬。</li>\n</ol>\n<blockquote>\n<p>文采有限，只是想记录一下而已，希望以后自己能在回来看看以前的自己的想法是怎样的，和看这篇文章的时候的自己有什么不一样，希望以这样的形式来记录自己的成长。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于技术\"><a href=\"#关于技术\" class=\"headerlink\" title=\"关于技术\"></a>关于技术</h3><ol>\n<li>技术的认知方面，相比较比年初、去年有了比较大的进步，在去年，我只知道学 <code>Laravle</code> 心里只想着，学好框架知识，就会很好的找到一个比较不错的工作，就能学好一门语言，现在想想那时还是太年轻。</li>\n<li>技术的长进方面，今年是从学生转变成一个程序员的一段时间，也通过今年这段找工作时间，知道和别人的差距，知道自己的哪些不足，清楚未来的方向。</li>\n<li>18 年也是对技术有一个新的认知的一年，从大二的时候，连写一个完整的后端代码都很困难，到现在信手拈来的代码逻辑，我觉得自己的技术和逻辑思维在这一年也是飞速的提升着。</li>\n<li>从年中想除了学好 PHP 之外，还想继续学其他编程语言，到现在觉得掌握编程语言的本质才是最重要，编程语言不是最重要，就像编程语言和框架的关系。当然，我还是想了解学习 Go 这门语言，也许这门语言是未来的趋势。</li>\n</ol>\n<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><ol>\n<li>今年的上半年还在学校无忧无虑的玩着，暑假就开始忙碌的找工作，到现在努力的适应工作环境，努力的从学生状态转换成程序员。</li>\n<li>关于工作想讲的还是很多的，想从第一家实习公司开始说，第一家实习公司，那时是自己找工作的时候，想着有一份工作就不错了，但是入职后，很是后悔，不仅工资低，而且代码很古老，而且入职三个月什么都没学到，还不如现在公司一个月学到的东西多，但是在第一家公司的时候，自己学了点 vue 相关知识，只是停留在了解阶段。</li>\n<li>今年还有一段时间处于找工作阶段，那段时间也算是狠补了一下基础知识。也是对自己的基础还是有很清楚的认知的，实在是太差了，哈哈，庆幸清醒的早啊。</li>\n<li>现在的工作，有一个有经验的师傅带着，入职一个月真的学到了不少东西，现在公司用着流行的技术，还是能学到不少东西的，自己是有打算在这公司慢慢的干下去的念头。</li>\n</ol>\n<h3 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h3><ol>\n<li>今年算是很难受的一年，从学校刚出来的时候，因为旁边都是认识的同学，所以没什么不习惯，但是自己一个人去找工作的时候还是很不习惯的，因为自己性格的原因，总是融不到公司团体中，有时候也很想改变现状，但是有时候想想还是算了，其实内向的性格也能带来其他的好处。</li>\n<li>代码技术真的充满了我生活的全部，白天工作写代码，晚上回来写些自己喜欢的技术，看些关于技术的书。</li>\n</ol>\n<h3 id=\"关于书籍\"><a href=\"#关于书籍\" class=\"headerlink\" title=\"关于书籍\"></a>关于书籍</h3><ol>\n<li>今年从实习开始，就觉得得系统的学一下计算机方面的基础知识，只有基础知识牢固了才能更好的掌握编程语言。</li>\n<li>买了很多，很多都没看，买了 kindle 但是也没完整的看完一本。</li>\n</ol>\n<h3 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h3><ol>\n<li>关于技术：不忘初心就好，认认真真学习，不要浪费一点时间，好好学自己喜欢的技术，希望 19 还是能认真的看完自己买的所有的书，打好自己的基础。</li>\n<li>关于工作：19 年，也是我毕业的时候，根据我现在的想法，我是希望实习结束留下来继续工作的。</li>\n<li>关于生活：还是希望自己在这一年能够脱单，不要再做单身🐶！！！还是希望自己有时间能出去转转，不要老是待在家里，还有就是希望自己能够多多运动，有个好的身体，才能更好的工作，才能玩自己喜欢的东西，做自己的大佬。</li>\n</ol>\n<blockquote>\n<p>文采有限，只是想记录一下而已，希望以后自己能在回来看看以前的自己的想法是怎样的，和看这篇文章的时候的自己有什么不一样，希望以这样的形式来记录自己的成长。</p>\n</blockquote>\n"},{"title":"Homestead 下切换 PHP 版本","date":"2019-02-11T13:54:22.000Z","_content":"因为原来使用 `Laravel` 框架的原因，所以一直使用着 `Homestead`，所以就会遇到需要切换 PHP 版本的问题\n1. 可以在 `Homestead.yaml` 中指定 PHP 版本，如：\n![blob.jpg](https://i.loli.net/2019/02/11/5c617e06a7d2a.jpg)\n\n2. 可以在虚拟机环境中切换指定的 PHP 版本\n\n> update-alternatives --display php 查看所有 php 版本和当前版本 <br>\nupdate-alternatives --config php 执行后，会列出当前 php 所有版本和编号，输入编号，切换到执行的版本\n\n![blob.jpg](https://i.loli.net/2019/02/11/5c617e5664c0d.jpg)\n\nLinux 很注重权限，所以在执行命令时加上 `sudo` 即可","source":"_posts/Homestead-下切换-PHP-版本.md","raw":"---\ntitle: Homestead 下切换 PHP 版本\ndate: 2019-02-11 21:54:22\ntags:\n---\n因为原来使用 `Laravel` 框架的原因，所以一直使用着 `Homestead`，所以就会遇到需要切换 PHP 版本的问题\n1. 可以在 `Homestead.yaml` 中指定 PHP 版本，如：\n![blob.jpg](https://i.loli.net/2019/02/11/5c617e06a7d2a.jpg)\n\n2. 可以在虚拟机环境中切换指定的 PHP 版本\n\n> update-alternatives --display php 查看所有 php 版本和当前版本 <br>\nupdate-alternatives --config php 执行后，会列出当前 php 所有版本和编号，输入编号，切换到执行的版本\n\n![blob.jpg](https://i.loli.net/2019/02/11/5c617e5664c0d.jpg)\n\nLinux 很注重权限，所以在执行命令时加上 `sudo` 即可","slug":"Homestead-下切换-PHP-版本","published":1,"updated":"2019-06-09T07:08:51.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuld90002vizqah3i8x1v","content":"<p>因为原来使用 <code>Laravel</code> 框架的原因，所以一直使用着 <code>Homestead</code>，所以就会遇到需要切换 PHP 版本的问题</p>\n<ol>\n<li><p>可以在 <code>Homestead.yaml</code> 中指定 PHP 版本，如：<br><img src=\"https://i.loli.net/2019/02/11/5c617e06a7d2a.jpg\" alt=\"blob.jpg\"></p>\n</li>\n<li><p>可以在虚拟机环境中切换指定的 PHP 版本</p>\n</li>\n</ol>\n<blockquote>\n<p>update-alternatives –display php 查看所有 php 版本和当前版本 <br><br>update-alternatives –config php 执行后，会列出当前 php 所有版本和编号，输入编号，切换到执行的版本</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/02/11/5c617e5664c0d.jpg\" alt=\"blob.jpg\"></p>\n<p>Linux 很注重权限，所以在执行命令时加上 <code>sudo</code> 即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为原来使用 <code>Laravel</code> 框架的原因，所以一直使用着 <code>Homestead</code>，所以就会遇到需要切换 PHP 版本的问题</p>\n<ol>\n<li><p>可以在 <code>Homestead.yaml</code> 中指定 PHP 版本，如：<br><img src=\"https://i.loli.net/2019/02/11/5c617e06a7d2a.jpg\" alt=\"blob.jpg\"></p>\n</li>\n<li><p>可以在虚拟机环境中切换指定的 PHP 版本</p>\n</li>\n</ol>\n<blockquote>\n<p>update-alternatives –display php 查看所有 php 版本和当前版本 <br><br>update-alternatives –config php 执行后，会列出当前 php 所有版本和编号，输入编号，切换到执行的版本</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/02/11/5c617e5664c0d.jpg\" alt=\"blob.jpg\"></p>\n<p>Linux 很注重权限，所以在执行命令时加上 <code>sudo</code> 即可</p>\n"},{"title":"【外文翻译】使用 Laravel 时的一些小技巧","date":"2019-04-04T02:05:09.000Z","_content":"> [译文地址](https://meramustaqbil.com/2019/03/23/20-un-known-gems-of-laravel/)\n> 第一次翻译文章，如有翻译不好的地方还请大家指出，大家也可以直接看原文。\n\n### 01: 触发父级的时间戳\n如标题所示，在子模型更新时，可以触发父模型的时间戳。例如 `Comment` 属于 `Post`，有时更新子模型导致更新父模型时间戳非常有用。例如，当 `Comment` 模型被更新时，您要自动触发父级 `Post` 模型的 `updated_at` 时间戳的更新。`Eloquent` 让它变得简单，只需添加一个包含子模型关系名称的 `touch` 属性。\n```\n<?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Comment extends Model\n{\n    /**\n     * 涉及到的所有关联关系。\n     *\n     * @var array\n     */\n    protected $touches = ['post'];\n    /**\n     * 获取评论所属的文章。\n     */\n    public function post()\n    {\n        return $this->belongsTo('App\\Post');\n    }\n}\n```\n\n### 02: 预加载精确的列\n在使用预加载时，可以从关系中获取指定的列。\n```\n$users = App\\Book::with('author:id,name')->get();\n```\n\n### 03: 为单个请求验证用户身份\n你可以使用 `Auth::once()` 来为单个请求验证用户的身份，此方法不会使用 `Cookie` 会话。这意味着此方法可能有助于构建无状态 **API** 。\n```\nif (Auth::once($credentials)) {\n    //\n}\n```\n\n### 04: 重定向到带有参数的控制器方法中\n你不仅可以将 `redirect()` 方法用于用户特定的 URL 或者路由中，还可以用于控制器中带有参数的方法中。\n```\nreturn redirect()->action('SomeController@method', ['param' => $value]);\n```\n\n### 05: 如何使用 `withDefault()` 避免在关系中出现的错误\n当一个关系被调用时，如果它不存在，则会出现致命的错误，例如 `$post->user->name` ，可以使用 `withDefault()` 来避免。\n```\n/** 获取文章作者 */ \npublic function user() \n{     \n\treturn $this->belongsTo('App\\User')->withDefault(); \n}\n```\n\n### 06: 在模版中两个平级的 `$loop` 变量\n在 `blade` 的 `foreach` 中，即使在两次循环中，依然可以通过使用 `$loop` 变量来获取父级变量。\n```\n@foreach ($users as $user)     \n\t@foreach ($user->posts as $post)         \n\t\t@if ($loop->parent->first)             \n\t\t\tThis is first iteration of the parent loop.         \n\t\t@endif     \n\t@endforeach \n@endforeach\n```\n\n### 07: 修改查询结果\n在执行 `Eloqument` 查询后，你可以使用 `map()` 来修改行。\n```\n$users = User::where('role_id', 1)->get()->map(function (User $user) {\n    $user->some_column = some_function($user);\n    return $user;\n});\n```\n\n### 08: 轻松的使用 `dd()`\n在 `Eloqument` 的最后加上 `$test->dd()`，来代替 `dd($result)`。\n```\n// 优化前\n$users = User::where('name', 'Taylor')->get();\ndd($users);\n// 优化后\n$users = User::where('name', 'Taylor')->get()->dd();\n```\n\n### 09: Use hasMany to saveMany.\n如果有 `hasMany()` 关联关系，和想要从父类对象中保存许多子类对象，可以使用 `saveMany()` 来达到你想要的效果。\n```\n$post = Post::find(1);\n$post->comments()->saveMany([\n    new Comment(['message' => 'First comment']),\n    new Comment(['message' => 'Second comment']),\n]);\n```\n\n### 10: 在 `Model::all()` 中指定列\n当你使用 `Eloqument` 的 `Model::all()` 时，你可以指定要返回的列。\n```\n$users = User::all(['id', 'name', 'email']);\n```\n\n### 11: `Blade` 中的 `@auth`\n你可以使用 `@auth` 指令来代替 `if` 语句来检查用户是否经过身份验证。\n##### 典型的方法：\n```\n@if(auth()->user())     // The user is authenticated. @endif \n```\n##### 简短的方法：\n```\n@auth    \n // The user is authenticated. \n@endauth\n```\n\n### 12: 预览邮件而不发送\n如果你使用 **Mailables** 来发送你的邮件，你可以预览它们而不发送出去。\n```\nRoute::get('/mailable', function () {\n    $invoice = App\\Invoice::find(1);\n    return new App\\Mail\\InvoicePaid($invoice);\n});\n```\n\n### 13: `hasMany` 的特定检查\n在 `Eloquent` 的 `hasMany()` 关系中，你可以筛选出具有 n 个子记录数量的记录。\n```\n// Author -> hasMany(Book::class) \n$authors = Author::has('books', '>', 5)->get();\n```\n\n### 14: 恢复多个软删除\n如果记录使用了软删除，那么你就可以一次恢复多条软删除记录。\n```\nPost::withTrashed()->where('author_id', 1)->restore();\n```\n\n### 15: 带时区的迁移列\n迁移文件不仅有 `timestamps()` 时间戳，还有 `timestampsTz()` 带有时区的时间戳。\n```\nSchema::create('employees', function (Blueprint $table) {\n\t$table->increments('id');\n\t$table->string('name');\n    $table->string('email');\n    $table->timestampsTz();\n});\n```\n\n### 16: 视图文件是否存在？\n你知道还可以检查视图文件是否存在吗？\n```\nif (view()->exists('custom.page')) {\n\t// Load the view\n}\n```\n\n### 17: 组中的路由组\n在路由文件中，你可以为一个路由组创造一个组，还可以为其指定特定的中间件。\n```\nRoute::group(['prefix' => 'account', 'as' => 'account.'], function() {\n    Route::get('login', 'AccountController@login');     \n    Route::get('register', 'AccountController@register');\n    Route::group(['middleware' => 'auth'], function() {         \n        Route::get('edit', 'AccountController@edit');     \n    });\n});\n```\n\n### 18: `Eloquent` 中的日期时间方法\n`whereDay()` , `whereMonth()` , `whereYear()` , `whereDate()` , `whereTime()` 这些方法皆为 `Eloquent` 中检查日期的方法。\n```\n$products = Product::whereDate('created_at', '2018-01-31')->get(); \n$products = Product::whereMonth('created_at', '12')->get(); \n$products = Product::whereDay('created_at', '31')->get(); \n$products = Product::whereYear('created_at', date('Y'))->get(); \n$products = Product::whereTime('created_at', '=', '14:13:58')->get();\n```\n\n### 19: 在 `Eloquent` 关系中使用 `orderBy()`\n你可以在 `Eloquent` 关系中直接指定 `orderBy()` 。\n```\npublic function products()\n{\n    return $this->hasMany(Product::class);\n}\npublic function productsByName()\n{\n    return $this->hasMany(Product::class)->orderBy('name');\n}\n```\n\n### 20: 无符号整型\n对于迁移的外键，不要使用 `integer()` , 而是使用 `unsignedInteger()` 或者是 `integer()->unsigned()` ，否则将会出现一系列的错误。\n```\nSchema::create('employees', function (Blueprint $table) {     \n    $table->unsignedInteger('company_id');     \n    $table->foreign('company_id')->references('id')->on('companies');     \n});\n```","source":"_posts/【外文翻译】使用-Laravel-时的一些小技巧.md","raw":"---\ntitle: 【外文翻译】使用 Laravel 时的一些小技巧\ndate: 2019-04-04 10:05:09\ntags:\n---\n> [译文地址](https://meramustaqbil.com/2019/03/23/20-un-known-gems-of-laravel/)\n> 第一次翻译文章，如有翻译不好的地方还请大家指出，大家也可以直接看原文。\n\n### 01: 触发父级的时间戳\n如标题所示，在子模型更新时，可以触发父模型的时间戳。例如 `Comment` 属于 `Post`，有时更新子模型导致更新父模型时间戳非常有用。例如，当 `Comment` 模型被更新时，您要自动触发父级 `Post` 模型的 `updated_at` 时间戳的更新。`Eloquent` 让它变得简单，只需添加一个包含子模型关系名称的 `touch` 属性。\n```\n<?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\nclass Comment extends Model\n{\n    /**\n     * 涉及到的所有关联关系。\n     *\n     * @var array\n     */\n    protected $touches = ['post'];\n    /**\n     * 获取评论所属的文章。\n     */\n    public function post()\n    {\n        return $this->belongsTo('App\\Post');\n    }\n}\n```\n\n### 02: 预加载精确的列\n在使用预加载时，可以从关系中获取指定的列。\n```\n$users = App\\Book::with('author:id,name')->get();\n```\n\n### 03: 为单个请求验证用户身份\n你可以使用 `Auth::once()` 来为单个请求验证用户的身份，此方法不会使用 `Cookie` 会话。这意味着此方法可能有助于构建无状态 **API** 。\n```\nif (Auth::once($credentials)) {\n    //\n}\n```\n\n### 04: 重定向到带有参数的控制器方法中\n你不仅可以将 `redirect()` 方法用于用户特定的 URL 或者路由中，还可以用于控制器中带有参数的方法中。\n```\nreturn redirect()->action('SomeController@method', ['param' => $value]);\n```\n\n### 05: 如何使用 `withDefault()` 避免在关系中出现的错误\n当一个关系被调用时，如果它不存在，则会出现致命的错误，例如 `$post->user->name` ，可以使用 `withDefault()` 来避免。\n```\n/** 获取文章作者 */ \npublic function user() \n{     \n\treturn $this->belongsTo('App\\User')->withDefault(); \n}\n```\n\n### 06: 在模版中两个平级的 `$loop` 变量\n在 `blade` 的 `foreach` 中，即使在两次循环中，依然可以通过使用 `$loop` 变量来获取父级变量。\n```\n@foreach ($users as $user)     \n\t@foreach ($user->posts as $post)         \n\t\t@if ($loop->parent->first)             \n\t\t\tThis is first iteration of the parent loop.         \n\t\t@endif     \n\t@endforeach \n@endforeach\n```\n\n### 07: 修改查询结果\n在执行 `Eloqument` 查询后，你可以使用 `map()` 来修改行。\n```\n$users = User::where('role_id', 1)->get()->map(function (User $user) {\n    $user->some_column = some_function($user);\n    return $user;\n});\n```\n\n### 08: 轻松的使用 `dd()`\n在 `Eloqument` 的最后加上 `$test->dd()`，来代替 `dd($result)`。\n```\n// 优化前\n$users = User::where('name', 'Taylor')->get();\ndd($users);\n// 优化后\n$users = User::where('name', 'Taylor')->get()->dd();\n```\n\n### 09: Use hasMany to saveMany.\n如果有 `hasMany()` 关联关系，和想要从父类对象中保存许多子类对象，可以使用 `saveMany()` 来达到你想要的效果。\n```\n$post = Post::find(1);\n$post->comments()->saveMany([\n    new Comment(['message' => 'First comment']),\n    new Comment(['message' => 'Second comment']),\n]);\n```\n\n### 10: 在 `Model::all()` 中指定列\n当你使用 `Eloqument` 的 `Model::all()` 时，你可以指定要返回的列。\n```\n$users = User::all(['id', 'name', 'email']);\n```\n\n### 11: `Blade` 中的 `@auth`\n你可以使用 `@auth` 指令来代替 `if` 语句来检查用户是否经过身份验证。\n##### 典型的方法：\n```\n@if(auth()->user())     // The user is authenticated. @endif \n```\n##### 简短的方法：\n```\n@auth    \n // The user is authenticated. \n@endauth\n```\n\n### 12: 预览邮件而不发送\n如果你使用 **Mailables** 来发送你的邮件，你可以预览它们而不发送出去。\n```\nRoute::get('/mailable', function () {\n    $invoice = App\\Invoice::find(1);\n    return new App\\Mail\\InvoicePaid($invoice);\n});\n```\n\n### 13: `hasMany` 的特定检查\n在 `Eloquent` 的 `hasMany()` 关系中，你可以筛选出具有 n 个子记录数量的记录。\n```\n// Author -> hasMany(Book::class) \n$authors = Author::has('books', '>', 5)->get();\n```\n\n### 14: 恢复多个软删除\n如果记录使用了软删除，那么你就可以一次恢复多条软删除记录。\n```\nPost::withTrashed()->where('author_id', 1)->restore();\n```\n\n### 15: 带时区的迁移列\n迁移文件不仅有 `timestamps()` 时间戳，还有 `timestampsTz()` 带有时区的时间戳。\n```\nSchema::create('employees', function (Blueprint $table) {\n\t$table->increments('id');\n\t$table->string('name');\n    $table->string('email');\n    $table->timestampsTz();\n});\n```\n\n### 16: 视图文件是否存在？\n你知道还可以检查视图文件是否存在吗？\n```\nif (view()->exists('custom.page')) {\n\t// Load the view\n}\n```\n\n### 17: 组中的路由组\n在路由文件中，你可以为一个路由组创造一个组，还可以为其指定特定的中间件。\n```\nRoute::group(['prefix' => 'account', 'as' => 'account.'], function() {\n    Route::get('login', 'AccountController@login');     \n    Route::get('register', 'AccountController@register');\n    Route::group(['middleware' => 'auth'], function() {         \n        Route::get('edit', 'AccountController@edit');     \n    });\n});\n```\n\n### 18: `Eloquent` 中的日期时间方法\n`whereDay()` , `whereMonth()` , `whereYear()` , `whereDate()` , `whereTime()` 这些方法皆为 `Eloquent` 中检查日期的方法。\n```\n$products = Product::whereDate('created_at', '2018-01-31')->get(); \n$products = Product::whereMonth('created_at', '12')->get(); \n$products = Product::whereDay('created_at', '31')->get(); \n$products = Product::whereYear('created_at', date('Y'))->get(); \n$products = Product::whereTime('created_at', '=', '14:13:58')->get();\n```\n\n### 19: 在 `Eloquent` 关系中使用 `orderBy()`\n你可以在 `Eloquent` 关系中直接指定 `orderBy()` 。\n```\npublic function products()\n{\n    return $this->hasMany(Product::class);\n}\npublic function productsByName()\n{\n    return $this->hasMany(Product::class)->orderBy('name');\n}\n```\n\n### 20: 无符号整型\n对于迁移的外键，不要使用 `integer()` , 而是使用 `unsignedInteger()` 或者是 `integer()->unsigned()` ，否则将会出现一系列的错误。\n```\nSchema::create('employees', function (Blueprint $table) {     \n    $table->unsignedInteger('company_id');     \n    $table->foreign('company_id')->references('id')->on('companies');     \n});\n```","slug":"【外文翻译】使用-Laravel-时的一些小技巧","published":1,"updated":"2019-06-09T07:13:59.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyulda0003vizq2x87s1d4","content":"<blockquote>\n<p><a href=\"https://meramustaqbil.com/2019/03/23/20-un-known-gems-of-laravel/\" target=\"_blank\" rel=\"noopener\">译文地址</a><br>第一次翻译文章，如有翻译不好的地方还请大家指出，大家也可以直接看原文。</p>\n</blockquote>\n<h3 id=\"01-触发父级的时间戳\"><a href=\"#01-触发父级的时间戳\" class=\"headerlink\" title=\"01: 触发父级的时间戳\"></a>01: 触发父级的时间戳</h3><p>如标题所示，在子模型更新时，可以触发父模型的时间戳。例如 <code>Comment</code> 属于 <code>Post</code>，有时更新子模型导致更新父模型时间戳非常有用。例如，当 <code>Comment</code> 模型被更新时，您要自动触发父级 <code>Post</code> 模型的 <code>updated_at</code> 时间戳的更新。<code>Eloquent</code> 让它变得简单，只需添加一个包含子模型关系名称的 <code>touch</code> 属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace App;</span><br><span class=\"line\">use Illuminate\\Database\\Eloquent\\Model;</span><br><span class=\"line\">class Comment extends Model</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 涉及到的所有关联关系。</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $touches = [&apos;post&apos;];</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取评论所属的文章。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function post()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;belongsTo(&apos;App\\Post&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"02-预加载精确的列\"><a href=\"#02-预加载精确的列\" class=\"headerlink\" title=\"02: 预加载精确的列\"></a>02: 预加载精确的列</h3><p>在使用预加载时，可以从关系中获取指定的列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$users = App\\Book::with(&apos;author:id,name&apos;)-&gt;get();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"03-为单个请求验证用户身份\"><a href=\"#03-为单个请求验证用户身份\" class=\"headerlink\" title=\"03: 为单个请求验证用户身份\"></a>03: 为单个请求验证用户身份</h3><p>你可以使用 <code>Auth::once()</code> 来为单个请求验证用户的身份，此方法不会使用 <code>Cookie</code> 会话。这意味着此方法可能有助于构建无状态 <strong>API</strong> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (Auth::once($credentials)) &#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"04-重定向到带有参数的控制器方法中\"><a href=\"#04-重定向到带有参数的控制器方法中\" class=\"headerlink\" title=\"04: 重定向到带有参数的控制器方法中\"></a>04: 重定向到带有参数的控制器方法中</h3><p>你不仅可以将 <code>redirect()</code> 方法用于用户特定的 URL 或者路由中，还可以用于控制器中带有参数的方法中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return redirect()-&gt;action(&apos;SomeController@method&apos;, [&apos;param&apos; =&gt; $value]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"05-如何使用-withDefault-避免在关系中出现的错误\"><a href=\"#05-如何使用-withDefault-避免在关系中出现的错误\" class=\"headerlink\" title=\"05: 如何使用 withDefault() 避免在关系中出现的错误\"></a>05: 如何使用 <code>withDefault()</code> 避免在关系中出现的错误</h3><p>当一个关系被调用时，如果它不存在，则会出现致命的错误，例如 <code>$post-&gt;user-&gt;name</code> ，可以使用 <code>withDefault()</code> 来避免。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 获取文章作者 */ </span><br><span class=\"line\">public function user() </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">\treturn $this-&gt;belongsTo(&apos;App\\User&apos;)-&gt;withDefault(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"06-在模版中两个平级的-loop-变量\"><a href=\"#06-在模版中两个平级的-loop-变量\" class=\"headerlink\" title=\"06: 在模版中两个平级的 $loop 变量\"></a>06: 在模版中两个平级的 <code>$loop</code> 变量</h3><p>在 <code>blade</code> 的 <code>foreach</code> 中，即使在两次循环中，依然可以通过使用 <code>$loop</code> 变量来获取父级变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@foreach ($users as $user)     </span><br><span class=\"line\">\t@foreach ($user-&gt;posts as $post)         </span><br><span class=\"line\">\t\t@if ($loop-&gt;parent-&gt;first)             </span><br><span class=\"line\">\t\t\tThis is first iteration of the parent loop.         </span><br><span class=\"line\">\t\t@endif     </span><br><span class=\"line\">\t@endforeach </span><br><span class=\"line\">@endforeach</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"07-修改查询结果\"><a href=\"#07-修改查询结果\" class=\"headerlink\" title=\"07: 修改查询结果\"></a>07: 修改查询结果</h3><p>在执行 <code>Eloqument</code> 查询后，你可以使用 <code>map()</code> 来修改行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$users = User::where(&apos;role_id&apos;, 1)-&gt;get()-&gt;map(function (User $user) &#123;</span><br><span class=\"line\">    $user-&gt;some_column = some_function($user);</span><br><span class=\"line\">    return $user;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"08-轻松的使用-dd\"><a href=\"#08-轻松的使用-dd\" class=\"headerlink\" title=\"08: 轻松的使用 dd()\"></a>08: 轻松的使用 <code>dd()</code></h3><p>在 <code>Eloqument</code> 的最后加上 <code>$test-&gt;dd()</code>，来代替 <code>dd($result)</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 优化前</span><br><span class=\"line\">$users = User::where(&apos;name&apos;, &apos;Taylor&apos;)-&gt;get();</span><br><span class=\"line\">dd($users);</span><br><span class=\"line\">// 优化后</span><br><span class=\"line\">$users = User::where(&apos;name&apos;, &apos;Taylor&apos;)-&gt;get()-&gt;dd();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"09-Use-hasMany-to-saveMany\"><a href=\"#09-Use-hasMany-to-saveMany\" class=\"headerlink\" title=\"09: Use hasMany to saveMany.\"></a>09: Use hasMany to saveMany.</h3><p>如果有 <code>hasMany()</code> 关联关系，和想要从父类对象中保存许多子类对象，可以使用 <code>saveMany()</code> 来达到你想要的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$post = Post::find(1);</span><br><span class=\"line\">$post-&gt;comments()-&gt;saveMany([</span><br><span class=\"line\">    new Comment([&apos;message&apos; =&gt; &apos;First comment&apos;]),</span><br><span class=\"line\">    new Comment([&apos;message&apos; =&gt; &apos;Second comment&apos;]),</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-在-Model-all-中指定列\"><a href=\"#10-在-Model-all-中指定列\" class=\"headerlink\" title=\"10: 在 Model::all() 中指定列\"></a>10: 在 <code>Model::all()</code> 中指定列</h3><p>当你使用 <code>Eloqument</code> 的 <code>Model::all()</code> 时，你可以指定要返回的列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$users = User::all([&apos;id&apos;, &apos;name&apos;, &apos;email&apos;]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-Blade-中的-auth\"><a href=\"#11-Blade-中的-auth\" class=\"headerlink\" title=\"11: Blade 中的 @auth\"></a>11: <code>Blade</code> 中的 <code>@auth</code></h3><p>你可以使用 <code>@auth</code> 指令来代替 <code>if</code> 语句来检查用户是否经过身份验证。</p>\n<h5 id=\"典型的方法：\"><a href=\"#典型的方法：\" class=\"headerlink\" title=\"典型的方法：\"></a>典型的方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@if(auth()-&gt;user())     // The user is authenticated. @endif</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"简短的方法：\"><a href=\"#简短的方法：\" class=\"headerlink\" title=\"简短的方法：\"></a>简短的方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@auth    </span><br><span class=\"line\"> // The user is authenticated. </span><br><span class=\"line\">@endauth</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-预览邮件而不发送\"><a href=\"#12-预览邮件而不发送\" class=\"headerlink\" title=\"12: 预览邮件而不发送\"></a>12: 预览邮件而不发送</h3><p>如果你使用 <strong>Mailables</strong> 来发送你的邮件，你可以预览它们而不发送出去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(&apos;/mailable&apos;, function () &#123;</span><br><span class=\"line\">    $invoice = App\\Invoice::find(1);</span><br><span class=\"line\">    return new App\\Mail\\InvoicePaid($invoice);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-hasMany-的特定检查\"><a href=\"#13-hasMany-的特定检查\" class=\"headerlink\" title=\"13: hasMany 的特定检查\"></a>13: <code>hasMany</code> 的特定检查</h3><p>在 <code>Eloquent</code> 的 <code>hasMany()</code> 关系中，你可以筛选出具有 n 个子记录数量的记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Author -&gt; hasMany(Book::class) </span><br><span class=\"line\">$authors = Author::has(&apos;books&apos;, &apos;&gt;&apos;, 5)-&gt;get();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-恢复多个软删除\"><a href=\"#14-恢复多个软删除\" class=\"headerlink\" title=\"14: 恢复多个软删除\"></a>14: 恢复多个软删除</h3><p>如果记录使用了软删除，那么你就可以一次恢复多条软删除记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post::withTrashed()-&gt;where(&apos;author_id&apos;, 1)-&gt;restore();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-带时区的迁移列\"><a href=\"#15-带时区的迁移列\" class=\"headerlink\" title=\"15: 带时区的迁移列\"></a>15: 带时区的迁移列</h3><p>迁移文件不仅有 <code>timestamps()</code> 时间戳，还有 <code>timestampsTz()</code> 带有时区的时间戳。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schema::create(&apos;employees&apos;, function (Blueprint $table) &#123;</span><br><span class=\"line\">\t$table-&gt;increments(&apos;id&apos;);</span><br><span class=\"line\">\t$table-&gt;string(&apos;name&apos;);</span><br><span class=\"line\">    $table-&gt;string(&apos;email&apos;);</span><br><span class=\"line\">    $table-&gt;timestampsTz();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-视图文件是否存在？\"><a href=\"#16-视图文件是否存在？\" class=\"headerlink\" title=\"16: 视图文件是否存在？\"></a>16: 视图文件是否存在？</h3><p>你知道还可以检查视图文件是否存在吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (view()-&gt;exists(&apos;custom.page&apos;)) &#123;</span><br><span class=\"line\">\t// Load the view</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-组中的路由组\"><a href=\"#17-组中的路由组\" class=\"headerlink\" title=\"17: 组中的路由组\"></a>17: 组中的路由组</h3><p>在路由文件中，你可以为一个路由组创造一个组，还可以为其指定特定的中间件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([&apos;prefix&apos; =&gt; &apos;account&apos;, &apos;as&apos; =&gt; &apos;account.&apos;], function() &#123;</span><br><span class=\"line\">    Route::get(&apos;login&apos;, &apos;AccountController@login&apos;);     </span><br><span class=\"line\">    Route::get(&apos;register&apos;, &apos;AccountController@register&apos;);</span><br><span class=\"line\">    Route::group([&apos;middleware&apos; =&gt; &apos;auth&apos;], function() &#123;         </span><br><span class=\"line\">        Route::get(&apos;edit&apos;, &apos;AccountController@edit&apos;);     </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Eloquent-中的日期时间方法\"><a href=\"#18-Eloquent-中的日期时间方法\" class=\"headerlink\" title=\"18: Eloquent 中的日期时间方法\"></a>18: <code>Eloquent</code> 中的日期时间方法</h3><p><code>whereDay()</code> , <code>whereMonth()</code> , <code>whereYear()</code> , <code>whereDate()</code> , <code>whereTime()</code> 这些方法皆为 <code>Eloquent</code> 中检查日期的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$products = Product::whereDate(&apos;created_at&apos;, &apos;2018-01-31&apos;)-&gt;get(); </span><br><span class=\"line\">$products = Product::whereMonth(&apos;created_at&apos;, &apos;12&apos;)-&gt;get(); </span><br><span class=\"line\">$products = Product::whereDay(&apos;created_at&apos;, &apos;31&apos;)-&gt;get(); </span><br><span class=\"line\">$products = Product::whereYear(&apos;created_at&apos;, date(&apos;Y&apos;))-&gt;get(); </span><br><span class=\"line\">$products = Product::whereTime(&apos;created_at&apos;, &apos;=&apos;, &apos;14:13:58&apos;)-&gt;get();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-在-Eloquent-关系中使用-orderBy\"><a href=\"#19-在-Eloquent-关系中使用-orderBy\" class=\"headerlink\" title=\"19: 在 Eloquent 关系中使用 orderBy()\"></a>19: 在 <code>Eloquent</code> 关系中使用 <code>orderBy()</code></h3><p>你可以在 <code>Eloquent</code> 关系中直接指定 <code>orderBy()</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function products()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;hasMany(Product::class);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public function productsByName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;hasMany(Product::class)-&gt;orderBy(&apos;name&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-无符号整型\"><a href=\"#20-无符号整型\" class=\"headerlink\" title=\"20: 无符号整型\"></a>20: 无符号整型</h3><p>对于迁移的外键，不要使用 <code>integer()</code> , 而是使用 <code>unsignedInteger()</code> 或者是 <code>integer()-&gt;unsigned()</code> ，否则将会出现一系列的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schema::create(&apos;employees&apos;, function (Blueprint $table) &#123;     </span><br><span class=\"line\">    $table-&gt;unsignedInteger(&apos;company_id&apos;);     </span><br><span class=\"line\">    $table-&gt;foreign(&apos;company_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;companies&apos;);     </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://meramustaqbil.com/2019/03/23/20-un-known-gems-of-laravel/\" target=\"_blank\" rel=\"noopener\">译文地址</a><br>第一次翻译文章，如有翻译不好的地方还请大家指出，大家也可以直接看原文。</p>\n</blockquote>\n<h3 id=\"01-触发父级的时间戳\"><a href=\"#01-触发父级的时间戳\" class=\"headerlink\" title=\"01: 触发父级的时间戳\"></a>01: 触发父级的时间戳</h3><p>如标题所示，在子模型更新时，可以触发父模型的时间戳。例如 <code>Comment</code> 属于 <code>Post</code>，有时更新子模型导致更新父模型时间戳非常有用。例如，当 <code>Comment</code> 模型被更新时，您要自动触发父级 <code>Post</code> 模型的 <code>updated_at</code> 时间戳的更新。<code>Eloquent</code> 让它变得简单，只需添加一个包含子模型关系名称的 <code>touch</code> 属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace App;</span><br><span class=\"line\">use Illuminate\\Database\\Eloquent\\Model;</span><br><span class=\"line\">class Comment extends Model</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 涉及到的所有关联关系。</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @var array</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected $touches = [&apos;post&apos;];</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取评论所属的文章。</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function post()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;belongsTo(&apos;App\\Post&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"02-预加载精确的列\"><a href=\"#02-预加载精确的列\" class=\"headerlink\" title=\"02: 预加载精确的列\"></a>02: 预加载精确的列</h3><p>在使用预加载时，可以从关系中获取指定的列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$users = App\\Book::with(&apos;author:id,name&apos;)-&gt;get();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"03-为单个请求验证用户身份\"><a href=\"#03-为单个请求验证用户身份\" class=\"headerlink\" title=\"03: 为单个请求验证用户身份\"></a>03: 为单个请求验证用户身份</h3><p>你可以使用 <code>Auth::once()</code> 来为单个请求验证用户的身份，此方法不会使用 <code>Cookie</code> 会话。这意味着此方法可能有助于构建无状态 <strong>API</strong> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (Auth::once($credentials)) &#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"04-重定向到带有参数的控制器方法中\"><a href=\"#04-重定向到带有参数的控制器方法中\" class=\"headerlink\" title=\"04: 重定向到带有参数的控制器方法中\"></a>04: 重定向到带有参数的控制器方法中</h3><p>你不仅可以将 <code>redirect()</code> 方法用于用户特定的 URL 或者路由中，还可以用于控制器中带有参数的方法中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return redirect()-&gt;action(&apos;SomeController@method&apos;, [&apos;param&apos; =&gt; $value]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"05-如何使用-withDefault-避免在关系中出现的错误\"><a href=\"#05-如何使用-withDefault-避免在关系中出现的错误\" class=\"headerlink\" title=\"05: 如何使用 withDefault() 避免在关系中出现的错误\"></a>05: 如何使用 <code>withDefault()</code> 避免在关系中出现的错误</h3><p>当一个关系被调用时，如果它不存在，则会出现致命的错误，例如 <code>$post-&gt;user-&gt;name</code> ，可以使用 <code>withDefault()</code> 来避免。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 获取文章作者 */ </span><br><span class=\"line\">public function user() </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">\treturn $this-&gt;belongsTo(&apos;App\\User&apos;)-&gt;withDefault(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"06-在模版中两个平级的-loop-变量\"><a href=\"#06-在模版中两个平级的-loop-变量\" class=\"headerlink\" title=\"06: 在模版中两个平级的 $loop 变量\"></a>06: 在模版中两个平级的 <code>$loop</code> 变量</h3><p>在 <code>blade</code> 的 <code>foreach</code> 中，即使在两次循环中，依然可以通过使用 <code>$loop</code> 变量来获取父级变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@foreach ($users as $user)     </span><br><span class=\"line\">\t@foreach ($user-&gt;posts as $post)         </span><br><span class=\"line\">\t\t@if ($loop-&gt;parent-&gt;first)             </span><br><span class=\"line\">\t\t\tThis is first iteration of the parent loop.         </span><br><span class=\"line\">\t\t@endif     </span><br><span class=\"line\">\t@endforeach </span><br><span class=\"line\">@endforeach</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"07-修改查询结果\"><a href=\"#07-修改查询结果\" class=\"headerlink\" title=\"07: 修改查询结果\"></a>07: 修改查询结果</h3><p>在执行 <code>Eloqument</code> 查询后，你可以使用 <code>map()</code> 来修改行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$users = User::where(&apos;role_id&apos;, 1)-&gt;get()-&gt;map(function (User $user) &#123;</span><br><span class=\"line\">    $user-&gt;some_column = some_function($user);</span><br><span class=\"line\">    return $user;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"08-轻松的使用-dd\"><a href=\"#08-轻松的使用-dd\" class=\"headerlink\" title=\"08: 轻松的使用 dd()\"></a>08: 轻松的使用 <code>dd()</code></h3><p>在 <code>Eloqument</code> 的最后加上 <code>$test-&gt;dd()</code>，来代替 <code>dd($result)</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 优化前</span><br><span class=\"line\">$users = User::where(&apos;name&apos;, &apos;Taylor&apos;)-&gt;get();</span><br><span class=\"line\">dd($users);</span><br><span class=\"line\">// 优化后</span><br><span class=\"line\">$users = User::where(&apos;name&apos;, &apos;Taylor&apos;)-&gt;get()-&gt;dd();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"09-Use-hasMany-to-saveMany\"><a href=\"#09-Use-hasMany-to-saveMany\" class=\"headerlink\" title=\"09: Use hasMany to saveMany.\"></a>09: Use hasMany to saveMany.</h3><p>如果有 <code>hasMany()</code> 关联关系，和想要从父类对象中保存许多子类对象，可以使用 <code>saveMany()</code> 来达到你想要的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$post = Post::find(1);</span><br><span class=\"line\">$post-&gt;comments()-&gt;saveMany([</span><br><span class=\"line\">    new Comment([&apos;message&apos; =&gt; &apos;First comment&apos;]),</span><br><span class=\"line\">    new Comment([&apos;message&apos; =&gt; &apos;Second comment&apos;]),</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-在-Model-all-中指定列\"><a href=\"#10-在-Model-all-中指定列\" class=\"headerlink\" title=\"10: 在 Model::all() 中指定列\"></a>10: 在 <code>Model::all()</code> 中指定列</h3><p>当你使用 <code>Eloqument</code> 的 <code>Model::all()</code> 时，你可以指定要返回的列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$users = User::all([&apos;id&apos;, &apos;name&apos;, &apos;email&apos;]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-Blade-中的-auth\"><a href=\"#11-Blade-中的-auth\" class=\"headerlink\" title=\"11: Blade 中的 @auth\"></a>11: <code>Blade</code> 中的 <code>@auth</code></h3><p>你可以使用 <code>@auth</code> 指令来代替 <code>if</code> 语句来检查用户是否经过身份验证。</p>\n<h5 id=\"典型的方法：\"><a href=\"#典型的方法：\" class=\"headerlink\" title=\"典型的方法：\"></a>典型的方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@if(auth()-&gt;user())     // The user is authenticated. @endif</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"简短的方法：\"><a href=\"#简短的方法：\" class=\"headerlink\" title=\"简短的方法：\"></a>简短的方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@auth    </span><br><span class=\"line\"> // The user is authenticated. </span><br><span class=\"line\">@endauth</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-预览邮件而不发送\"><a href=\"#12-预览邮件而不发送\" class=\"headerlink\" title=\"12: 预览邮件而不发送\"></a>12: 预览邮件而不发送</h3><p>如果你使用 <strong>Mailables</strong> 来发送你的邮件，你可以预览它们而不发送出去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::get(&apos;/mailable&apos;, function () &#123;</span><br><span class=\"line\">    $invoice = App\\Invoice::find(1);</span><br><span class=\"line\">    return new App\\Mail\\InvoicePaid($invoice);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-hasMany-的特定检查\"><a href=\"#13-hasMany-的特定检查\" class=\"headerlink\" title=\"13: hasMany 的特定检查\"></a>13: <code>hasMany</code> 的特定检查</h3><p>在 <code>Eloquent</code> 的 <code>hasMany()</code> 关系中，你可以筛选出具有 n 个子记录数量的记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Author -&gt; hasMany(Book::class) </span><br><span class=\"line\">$authors = Author::has(&apos;books&apos;, &apos;&gt;&apos;, 5)-&gt;get();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-恢复多个软删除\"><a href=\"#14-恢复多个软删除\" class=\"headerlink\" title=\"14: 恢复多个软删除\"></a>14: 恢复多个软删除</h3><p>如果记录使用了软删除，那么你就可以一次恢复多条软删除记录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post::withTrashed()-&gt;where(&apos;author_id&apos;, 1)-&gt;restore();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-带时区的迁移列\"><a href=\"#15-带时区的迁移列\" class=\"headerlink\" title=\"15: 带时区的迁移列\"></a>15: 带时区的迁移列</h3><p>迁移文件不仅有 <code>timestamps()</code> 时间戳，还有 <code>timestampsTz()</code> 带有时区的时间戳。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schema::create(&apos;employees&apos;, function (Blueprint $table) &#123;</span><br><span class=\"line\">\t$table-&gt;increments(&apos;id&apos;);</span><br><span class=\"line\">\t$table-&gt;string(&apos;name&apos;);</span><br><span class=\"line\">    $table-&gt;string(&apos;email&apos;);</span><br><span class=\"line\">    $table-&gt;timestampsTz();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-视图文件是否存在？\"><a href=\"#16-视图文件是否存在？\" class=\"headerlink\" title=\"16: 视图文件是否存在？\"></a>16: 视图文件是否存在？</h3><p>你知道还可以检查视图文件是否存在吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (view()-&gt;exists(&apos;custom.page&apos;)) &#123;</span><br><span class=\"line\">\t// Load the view</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-组中的路由组\"><a href=\"#17-组中的路由组\" class=\"headerlink\" title=\"17: 组中的路由组\"></a>17: 组中的路由组</h3><p>在路由文件中，你可以为一个路由组创造一个组，还可以为其指定特定的中间件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route::group([&apos;prefix&apos; =&gt; &apos;account&apos;, &apos;as&apos; =&gt; &apos;account.&apos;], function() &#123;</span><br><span class=\"line\">    Route::get(&apos;login&apos;, &apos;AccountController@login&apos;);     </span><br><span class=\"line\">    Route::get(&apos;register&apos;, &apos;AccountController@register&apos;);</span><br><span class=\"line\">    Route::group([&apos;middleware&apos; =&gt; &apos;auth&apos;], function() &#123;         </span><br><span class=\"line\">        Route::get(&apos;edit&apos;, &apos;AccountController@edit&apos;);     </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Eloquent-中的日期时间方法\"><a href=\"#18-Eloquent-中的日期时间方法\" class=\"headerlink\" title=\"18: Eloquent 中的日期时间方法\"></a>18: <code>Eloquent</code> 中的日期时间方法</h3><p><code>whereDay()</code> , <code>whereMonth()</code> , <code>whereYear()</code> , <code>whereDate()</code> , <code>whereTime()</code> 这些方法皆为 <code>Eloquent</code> 中检查日期的方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$products = Product::whereDate(&apos;created_at&apos;, &apos;2018-01-31&apos;)-&gt;get(); </span><br><span class=\"line\">$products = Product::whereMonth(&apos;created_at&apos;, &apos;12&apos;)-&gt;get(); </span><br><span class=\"line\">$products = Product::whereDay(&apos;created_at&apos;, &apos;31&apos;)-&gt;get(); </span><br><span class=\"line\">$products = Product::whereYear(&apos;created_at&apos;, date(&apos;Y&apos;))-&gt;get(); </span><br><span class=\"line\">$products = Product::whereTime(&apos;created_at&apos;, &apos;=&apos;, &apos;14:13:58&apos;)-&gt;get();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-在-Eloquent-关系中使用-orderBy\"><a href=\"#19-在-Eloquent-关系中使用-orderBy\" class=\"headerlink\" title=\"19: 在 Eloquent 关系中使用 orderBy()\"></a>19: 在 <code>Eloquent</code> 关系中使用 <code>orderBy()</code></h3><p>你可以在 <code>Eloquent</code> 关系中直接指定 <code>orderBy()</code> 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function products()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;hasMany(Product::class);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public function productsByName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;hasMany(Product::class)-&gt;orderBy(&apos;name&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-无符号整型\"><a href=\"#20-无符号整型\" class=\"headerlink\" title=\"20: 无符号整型\"></a>20: 无符号整型</h3><p>对于迁移的外键，不要使用 <code>integer()</code> , 而是使用 <code>unsignedInteger()</code> 或者是 <code>integer()-&gt;unsigned()</code> ，否则将会出现一系列的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Schema::create(&apos;employees&apos;, function (Blueprint $table) &#123;     </span><br><span class=\"line\">    $table-&gt;unsignedInteger(&apos;company_id&apos;);     </span><br><span class=\"line\">    $table-&gt;foreign(&apos;company_id&apos;)-&gt;references(&apos;id&apos;)-&gt;on(&apos;companies&apos;);     </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"使用 Hexo + GitHub 搭建个人博客","date":"2019-06-08T14:34:13.000Z","_content":"### 前言\n之前一直用的是 WordPress + 阿里云 来搭建个人博客，因为自己的服务器配置处于乞丐版，当然用于搭建个人博客是完全够了，因为也没有推广自己的博客，所以流量几乎没有，大部分都是爬虫访问😅，还有个重要的原因是阿里云服务器是学生优惠买的，若到期了就没办法继续使用了，所以一直有将个人博客搭建在 Github 上的想法。\n\n### 什么是 Hexo ？\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装及部署\n#### 个人网站域名（不是必须）\n个人网站域名并不是必须的，若没有的话也可以，当然访问的域名就没有那么直白，可以这样访问：username.github.io，这样访问个人博客，若有域名的话可以更容易记一点，比如我的域名 blog.sayhe110.cn ，这样让别人更加容易记住。<br>\n\n申请域名的地方有很多，个人比较推荐 [阿里云](https://www.aliyun.com/) 与 [腾讯云](https://cloud.tencent.com/)。\n\n#### Github\n因为是基于 Hexo + Github 搭建个人博客，所以需要 Github 账号，以及创建 Github 仓库，在这就不介绍如何使用 Github 了，可以看这篇 [文章](https://www.runoob.com/w3cnote/android-tutorial-git-repo-create.html) 学习如何使用及创建仓库。例如我的仓库：\n\n<img src=\"http://ww2.sinaimg.cn/large/006tNc79gy1g3uu87oeikj30js04c74g.jpg\" width=\"300\" height=\"80\"/>\n\n#### 安装 Git\n什么是 Git ？Git 为分布式版本控制系统，我们将文章在本地写好后，需要同步至 GitHub，所以需要 Git 。Git 的下载与使用直接看文档即可，[文档地址](https://git-scm.com/book/zh/v2)。友情提示：不要忘记设置 Git 本地的全局配置与 Key，若不明白可以看下 [廖雪峰教程](https://www.liaoxuefeng.com/wiki/896043488029600)。\n\n#### 安装 Node.js\n因为 Hexo 是基于 Node.js ，所以还需要下载 Node.js。也是看 [文档](http://nodejs.cn/) 安装就好。\n安装完成后使用 `node -v` 和 `npm -v` 命令查看是否安装成功。\n\n<img src=\"http://ww4.sinaimg.cn/large/006tNc79gy1g3uv5mjto2j314m0800ui.jpg\" width=70%>\n\n#### 安装 Hexo\n之前介绍过 Hexo，所以就直接通过 `npm install -g hexo-cli` 命令安装即可，若 npm 过慢，可以使用 cnpm，具体方法百度、谷歌。<br>\n在合适的文件夹位置命令行中，通过 `hexo init blog` 命令来初始化博客， `blog` 为博客项目名称。<br>\n可以通过以下命令来检查是否安装成功。\n```shell\nhexo new my_blog\n\nhexo g\n\nhexo s\n```\n然后在浏览器中输入 `localhost:4000` 即可访问博客。\n\n#### 关联 GitHub\n打开站点的 `_config.yml` 文件，修改以下配置：\n```yml\ndeploy: \n    type: git\n    repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git\n    branch: master\n```\n我的配置供你参考：\n```yml\ndeploy: \n    type: git\n    repo: https://github.com/SayHe110/sayhe110.github.io.git\n    branch: master\n```\n最后安装 Git 部署插件：\n```shell\nnpm install hexo-deployer-git --save\n```\n通过以下命令将网站部署（命令在最后解释，以及介绍常用命令）：\n```shell\nhexo clean \n\nhexo g \n\nhexo d\n```\n\n试着访问博客，在浏览器输入 username.github.io (username 为自己的github 用户名)，例如我的地址为：sayhe110.github.io\n\n#### 绑定域名（不是必须）\n若我们有域名的话，我们可以绑定自己的域名，下次就可以通过这个域名进行访问，在域名服务厂商中解析域名，比如：\n![](http://ww3.sinaimg.cn/large/006tNc79gy1g3uvqjx4apj31vc084gn4.jpg)\n![](http://ww4.sinaimg.cn/large/006tNc79gy1g3uvs1rffyj31v2052gm7.jpg)\n\n其中记录类型为 CNAME 记录值为 github 仓库域名如：sayhe110.github.io\n\n在博客项目中 `source` 目录下创建 `CNAME` 文件，然后输入域名如：\n<img src=\"http://ww3.sinaimg.cn/large/006tNc79gy1g3uvxk94j0j30y00aqq3t.jpg\" width=70%/>\n\n最后设置 Github 仓库个性化域名，博客项目中进入 `settings -> custom domain` ，设置自己域名，然后 `save` 即可。\n\n然后在本地博客项目文件夹目录下，输入以下命令：\n```shell\nhexo clean\n\nhexo g\n\nhexo d\n```\n\n现在在浏览器地址栏输入个性化域名即可访问博客。\n\n### 个性化主题\nHexo 有许多有趣好看的主题供大家选择，可以直接看[这里](https://hexo.io/themes/)，选取心仪的主题，大部分主题都有安装步骤，跟着安装步骤安装即可。\n\n### 常用命令介绍\n博客大体已经完成，最常用的就几条命令：\n```shell\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\n\nhexo clean # 清除缓存，若是网页正常情况下可以忽略这条命令\n\nhexo g # hexo generate 简写\n\nhexo d # hexo deploy 简写\n```\n其他常用命令介绍：\n```shell \nnpm update hexo -g #升级 \n\nhexo init #初始化博客\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\n\nhexo server -s #静态模式\n\nhexo server -p 5000 #更改端口\n\nhexo server -i 192.168.1.1 #自定义 IP\n```\n\n### 其他\n大家可以尝试更多好玩的，以及尝试更多好看的主题，😄<br>\n关于图片大家可以选择图床进行上传文件\n\n### 参考资料\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n- [Hexo 文档](https://hexo.io/zh-cn/docs/index.html)\n","source":"_posts/使用-Hexo-GitHub-构建个人博客.md","raw":"---\ntitle: 使用 Hexo + GitHub 搭建个人博客\ndate: 2019-06-08 22:34:13\ntags:\n---\n### 前言\n之前一直用的是 WordPress + 阿里云 来搭建个人博客，因为自己的服务器配置处于乞丐版，当然用于搭建个人博客是完全够了，因为也没有推广自己的博客，所以流量几乎没有，大部分都是爬虫访问😅，还有个重要的原因是阿里云服务器是学生优惠买的，若到期了就没办法继续使用了，所以一直有将个人博客搭建在 Github 上的想法。\n\n### 什么是 Hexo ？\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装及部署\n#### 个人网站域名（不是必须）\n个人网站域名并不是必须的，若没有的话也可以，当然访问的域名就没有那么直白，可以这样访问：username.github.io，这样访问个人博客，若有域名的话可以更容易记一点，比如我的域名 blog.sayhe110.cn ，这样让别人更加容易记住。<br>\n\n申请域名的地方有很多，个人比较推荐 [阿里云](https://www.aliyun.com/) 与 [腾讯云](https://cloud.tencent.com/)。\n\n#### Github\n因为是基于 Hexo + Github 搭建个人博客，所以需要 Github 账号，以及创建 Github 仓库，在这就不介绍如何使用 Github 了，可以看这篇 [文章](https://www.runoob.com/w3cnote/android-tutorial-git-repo-create.html) 学习如何使用及创建仓库。例如我的仓库：\n\n<img src=\"http://ww2.sinaimg.cn/large/006tNc79gy1g3uu87oeikj30js04c74g.jpg\" width=\"300\" height=\"80\"/>\n\n#### 安装 Git\n什么是 Git ？Git 为分布式版本控制系统，我们将文章在本地写好后，需要同步至 GitHub，所以需要 Git 。Git 的下载与使用直接看文档即可，[文档地址](https://git-scm.com/book/zh/v2)。友情提示：不要忘记设置 Git 本地的全局配置与 Key，若不明白可以看下 [廖雪峰教程](https://www.liaoxuefeng.com/wiki/896043488029600)。\n\n#### 安装 Node.js\n因为 Hexo 是基于 Node.js ，所以还需要下载 Node.js。也是看 [文档](http://nodejs.cn/) 安装就好。\n安装完成后使用 `node -v` 和 `npm -v` 命令查看是否安装成功。\n\n<img src=\"http://ww4.sinaimg.cn/large/006tNc79gy1g3uv5mjto2j314m0800ui.jpg\" width=70%>\n\n#### 安装 Hexo\n之前介绍过 Hexo，所以就直接通过 `npm install -g hexo-cli` 命令安装即可，若 npm 过慢，可以使用 cnpm，具体方法百度、谷歌。<br>\n在合适的文件夹位置命令行中，通过 `hexo init blog` 命令来初始化博客， `blog` 为博客项目名称。<br>\n可以通过以下命令来检查是否安装成功。\n```shell\nhexo new my_blog\n\nhexo g\n\nhexo s\n```\n然后在浏览器中输入 `localhost:4000` 即可访问博客。\n\n#### 关联 GitHub\n打开站点的 `_config.yml` 文件，修改以下配置：\n```yml\ndeploy: \n    type: git\n    repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git\n    branch: master\n```\n我的配置供你参考：\n```yml\ndeploy: \n    type: git\n    repo: https://github.com/SayHe110/sayhe110.github.io.git\n    branch: master\n```\n最后安装 Git 部署插件：\n```shell\nnpm install hexo-deployer-git --save\n```\n通过以下命令将网站部署（命令在最后解释，以及介绍常用命令）：\n```shell\nhexo clean \n\nhexo g \n\nhexo d\n```\n\n试着访问博客，在浏览器输入 username.github.io (username 为自己的github 用户名)，例如我的地址为：sayhe110.github.io\n\n#### 绑定域名（不是必须）\n若我们有域名的话，我们可以绑定自己的域名，下次就可以通过这个域名进行访问，在域名服务厂商中解析域名，比如：\n![](http://ww3.sinaimg.cn/large/006tNc79gy1g3uvqjx4apj31vc084gn4.jpg)\n![](http://ww4.sinaimg.cn/large/006tNc79gy1g3uvs1rffyj31v2052gm7.jpg)\n\n其中记录类型为 CNAME 记录值为 github 仓库域名如：sayhe110.github.io\n\n在博客项目中 `source` 目录下创建 `CNAME` 文件，然后输入域名如：\n<img src=\"http://ww3.sinaimg.cn/large/006tNc79gy1g3uvxk94j0j30y00aqq3t.jpg\" width=70%/>\n\n最后设置 Github 仓库个性化域名，博客项目中进入 `settings -> custom domain` ，设置自己域名，然后 `save` 即可。\n\n然后在本地博客项目文件夹目录下，输入以下命令：\n```shell\nhexo clean\n\nhexo g\n\nhexo d\n```\n\n现在在浏览器地址栏输入个性化域名即可访问博客。\n\n### 个性化主题\nHexo 有许多有趣好看的主题供大家选择，可以直接看[这里](https://hexo.io/themes/)，选取心仪的主题，大部分主题都有安装步骤，跟着安装步骤安装即可。\n\n### 常用命令介绍\n博客大体已经完成，最常用的就几条命令：\n```shell\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\n\nhexo clean # 清除缓存，若是网页正常情况下可以忽略这条命令\n\nhexo g # hexo generate 简写\n\nhexo d # hexo deploy 简写\n```\n其他常用命令介绍：\n```shell \nnpm update hexo -g #升级 \n\nhexo init #初始化博客\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\n\nhexo server -s #静态模式\n\nhexo server -p 5000 #更改端口\n\nhexo server -i 192.168.1.1 #自定义 IP\n```\n\n### 其他\n大家可以尝试更多好玩的，以及尝试更多好看的主题，😄<br>\n关于图片大家可以选择图床进行上传文件\n\n### 参考资料\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n- [Hexo 文档](https://hexo.io/zh-cn/docs/index.html)\n","slug":"使用-Hexo-GitHub-构建个人博客","published":1,"updated":"2019-06-09T06:44:39.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuldc0004vizqe8hph2ew","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前一直用的是 WordPress + 阿里云 来搭建个人博客，因为自己的服务器配置处于乞丐版，当然用于搭建个人博客是完全够了，因为也没有推广自己的博客，所以流量几乎没有，大部分都是爬虫访问😅，还有个重要的原因是阿里云服务器是学生优惠买的，若到期了就没办法继续使用了，所以一直有将个人博客搭建在 Github 上的想法。</p>\n<h3 id=\"什么是-Hexo-？\"><a href=\"#什么是-Hexo-？\" class=\"headerlink\" title=\"什么是 Hexo ？\"></a>什么是 Hexo ？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装及部署\"><a href=\"#安装及部署\" class=\"headerlink\" title=\"安装及部署\"></a>安装及部署</h3><h4 id=\"个人网站域名（不是必须）\"><a href=\"#个人网站域名（不是必须）\" class=\"headerlink\" title=\"个人网站域名（不是必须）\"></a>个人网站域名（不是必须）</h4><p>个人网站域名并不是必须的，若没有的话也可以，当然访问的域名就没有那么直白，可以这样访问：username.github.io，这样访问个人博客，若有域名的话可以更容易记一点，比如我的域名 blog.sayhe110.cn ，这样让别人更加容易记住。<br></p>\n<p>申请域名的地方有很多，个人比较推荐 <a href=\"https://www.aliyun.com/\" target=\"_blank\" rel=\"noopener\">阿里云</a> 与 <a href=\"https://cloud.tencent.com/\" target=\"_blank\" rel=\"noopener\">腾讯云</a>。</p>\n<h4 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h4><p>因为是基于 Hexo + Github 搭建个人博客，所以需要 Github 账号，以及创建 Github 仓库，在这就不介绍如何使用 Github 了，可以看这篇 <a href=\"https://www.runoob.com/w3cnote/android-tutorial-git-repo-create.html\" target=\"_blank\" rel=\"noopener\">文章</a> 学习如何使用及创建仓库。例如我的仓库：</p>\n<img src=\"http://ww2.sinaimg.cn/large/006tNc79gy1g3uu87oeikj30js04c74g.jpg\" width=\"300\" height=\"80\">\n\n<h4 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h4><p>什么是 Git ？Git 为分布式版本控制系统，我们将文章在本地写好后，需要同步至 GitHub，所以需要 Git 。Git 的下载与使用直接看文档即可，<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">文档地址</a>。友情提示：不要忘记设置 Git 本地的全局配置与 Key，若不明白可以看下 <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰教程</a>。</p>\n<h4 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h4><p>因为 Hexo 是基于 Node.js ，所以还需要下载 Node.js。也是看 <a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">文档</a> 安装就好。<br>安装完成后使用 <code>node -v</code> 和 <code>npm -v</code> 命令查看是否安装成功。</p>\n<img src=\"http://ww4.sinaimg.cn/large/006tNc79gy1g3uv5mjto2j314m0800ui.jpg\" width=\"70%\">\n\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>之前介绍过 Hexo，所以就直接通过 <code>npm install -g hexo-cli</code> 命令安装即可，若 npm 过慢，可以使用 cnpm，具体方法百度、谷歌。<br><br>在合适的文件夹位置命令行中，通过 <code>hexo init blog</code> 命令来初始化博客， <code>blog</code> 为博客项目名称。<br><br>可以通过以下命令来检查是否安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new my_blog</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器中输入 <code>localhost:4000</code> 即可访问博客。</p>\n<h4 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h4><p>打开站点的 <code>_config.yml</code> 文件，修改以下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span> <span class=\"string\">这里填入你之前在GitHub上创建仓库的完整路径，记得加上</span> <span class=\"string\">.git</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>我的配置供你参考：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span> <span class=\"attr\">https://github.com/SayHe110/sayhe110.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>最后安装 Git 部署插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>通过以下命令将网站部署（命令在最后解释，以及介绍常用命令）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\"></span><br><span class=\"line\">hexo g </span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>试着访问博客，在浏览器输入 username.github.io (username 为自己的github 用户名)，例如我的地址为：sayhe110.github.io</p>\n<h4 id=\"绑定域名（不是必须）\"><a href=\"#绑定域名（不是必须）\" class=\"headerlink\" title=\"绑定域名（不是必须）\"></a>绑定域名（不是必须）</h4><p>若我们有域名的话，我们可以绑定自己的域名，下次就可以通过这个域名进行访问，在域名服务厂商中解析域名，比如：<br><img src=\"http://ww3.sinaimg.cn/large/006tNc79gy1g3uvqjx4apj31vc084gn4.jpg\" alt><br><img src=\"http://ww4.sinaimg.cn/large/006tNc79gy1g3uvs1rffyj31v2052gm7.jpg\" alt></p>\n<p>其中记录类型为 CNAME 记录值为 github 仓库域名如：sayhe110.github.io</p>\n<p>在博客项目中 <code>source</code> 目录下创建 <code>CNAME</code> 文件，然后输入域名如：<br><img src=\"http://ww3.sinaimg.cn/large/006tNc79gy1g3uvxk94j0j30y00aqq3t.jpg\" width=\"70%/\"></p>\n<p>最后设置 Github 仓库个性化域名，博客项目中进入 <code>settings -&gt; custom domain</code> ，设置自己域名，然后 <code>save</code> 即可。</p>\n<p>然后在本地博客项目文件夹目录下，输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>现在在浏览器地址栏输入个性化域名即可访问博客。</p>\n<h3 id=\"个性化主题\"><a href=\"#个性化主题\" class=\"headerlink\" title=\"个性化主题\"></a>个性化主题</h3><p>Hexo 有许多有趣好看的主题供大家选择，可以直接看<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">这里</a>，选取心仪的主题，大部分主题都有安装步骤，跟着安装步骤安装即可。</p>\n<h3 id=\"常用命令介绍\"><a href=\"#常用命令介绍\" class=\"headerlink\" title=\"常用命令介绍\"></a>常用命令介绍</h3><p>博客大体已经完成，最常用的就几条命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean # 清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g # hexo generate 简写</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d # hexo deploy 简写</span><br></pre></td></tr></table></figure>\n\n<p>其他常用命令介绍：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update hexo -g #升级 </span><br><span class=\"line\"></span><br><span class=\"line\">hexo init #初始化博客</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>大家可以尝试更多好玩的，以及尝试更多好看的主题，😄<br><br>关于图片大家可以选择图床进行上传文件</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo 文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前一直用的是 WordPress + 阿里云 来搭建个人博客，因为自己的服务器配置处于乞丐版，当然用于搭建个人博客是完全够了，因为也没有推广自己的博客，所以流量几乎没有，大部分都是爬虫访问😅，还有个重要的原因是阿里云服务器是学生优惠买的，若到期了就没办法继续使用了，所以一直有将个人博客搭建在 Github 上的想法。</p>\n<h3 id=\"什么是-Hexo-？\"><a href=\"#什么是-Hexo-？\" class=\"headerlink\" title=\"什么是 Hexo ？\"></a>什么是 Hexo ？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装及部署\"><a href=\"#安装及部署\" class=\"headerlink\" title=\"安装及部署\"></a>安装及部署</h3><h4 id=\"个人网站域名（不是必须）\"><a href=\"#个人网站域名（不是必须）\" class=\"headerlink\" title=\"个人网站域名（不是必须）\"></a>个人网站域名（不是必须）</h4><p>个人网站域名并不是必须的，若没有的话也可以，当然访问的域名就没有那么直白，可以这样访问：username.github.io，这样访问个人博客，若有域名的话可以更容易记一点，比如我的域名 blog.sayhe110.cn ，这样让别人更加容易记住。<br></p>\n<p>申请域名的地方有很多，个人比较推荐 <a href=\"https://www.aliyun.com/\" target=\"_blank\" rel=\"noopener\">阿里云</a> 与 <a href=\"https://cloud.tencent.com/\" target=\"_blank\" rel=\"noopener\">腾讯云</a>。</p>\n<h4 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h4><p>因为是基于 Hexo + Github 搭建个人博客，所以需要 Github 账号，以及创建 Github 仓库，在这就不介绍如何使用 Github 了，可以看这篇 <a href=\"https://www.runoob.com/w3cnote/android-tutorial-git-repo-create.html\" target=\"_blank\" rel=\"noopener\">文章</a> 学习如何使用及创建仓库。例如我的仓库：</p>\n<img src=\"http://ww2.sinaimg.cn/large/006tNc79gy1g3uu87oeikj30js04c74g.jpg\" width=\"300\" height=\"80\">\n\n<h4 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h4><p>什么是 Git ？Git 为分布式版本控制系统，我们将文章在本地写好后，需要同步至 GitHub，所以需要 Git 。Git 的下载与使用直接看文档即可，<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">文档地址</a>。友情提示：不要忘记设置 Git 本地的全局配置与 Key，若不明白可以看下 <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰教程</a>。</p>\n<h4 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h4><p>因为 Hexo 是基于 Node.js ，所以还需要下载 Node.js。也是看 <a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">文档</a> 安装就好。<br>安装完成后使用 <code>node -v</code> 和 <code>npm -v</code> 命令查看是否安装成功。</p>\n<img src=\"http://ww4.sinaimg.cn/large/006tNc79gy1g3uv5mjto2j314m0800ui.jpg\" width=\"70%\">\n\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><p>之前介绍过 Hexo，所以就直接通过 <code>npm install -g hexo-cli</code> 命令安装即可，若 npm 过慢，可以使用 cnpm，具体方法百度、谷歌。<br><br>在合适的文件夹位置命令行中，通过 <code>hexo init blog</code> 命令来初始化博客， <code>blog</code> 为博客项目名称。<br><br>可以通过以下命令来检查是否安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new my_blog</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器中输入 <code>localhost:4000</code> 即可访问博客。</p>\n<h4 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h4><p>打开站点的 <code>_config.yml</code> 文件，修改以下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span> <span class=\"string\">这里填入你之前在GitHub上创建仓库的完整路径，记得加上</span> <span class=\"string\">.git</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>我的配置供你参考：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span> </span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span> <span class=\"attr\">https://github.com/SayHe110/sayhe110.github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>最后安装 Git 部署插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>通过以下命令将网站部署（命令在最后解释，以及介绍常用命令）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\"></span><br><span class=\"line\">hexo g </span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>试着访问博客，在浏览器输入 username.github.io (username 为自己的github 用户名)，例如我的地址为：sayhe110.github.io</p>\n<h4 id=\"绑定域名（不是必须）\"><a href=\"#绑定域名（不是必须）\" class=\"headerlink\" title=\"绑定域名（不是必须）\"></a>绑定域名（不是必须）</h4><p>若我们有域名的话，我们可以绑定自己的域名，下次就可以通过这个域名进行访问，在域名服务厂商中解析域名，比如：<br><img src=\"http://ww3.sinaimg.cn/large/006tNc79gy1g3uvqjx4apj31vc084gn4.jpg\" alt><br><img src=\"http://ww4.sinaimg.cn/large/006tNc79gy1g3uvs1rffyj31v2052gm7.jpg\" alt></p>\n<p>其中记录类型为 CNAME 记录值为 github 仓库域名如：sayhe110.github.io</p>\n<p>在博客项目中 <code>source</code> 目录下创建 <code>CNAME</code> 文件，然后输入域名如：<br><img src=\"http://ww3.sinaimg.cn/large/006tNc79gy1g3uvxk94j0j30y00aqq3t.jpg\" width=\"70%/\"></p>\n<p>最后设置 Github 仓库个性化域名，博客项目中进入 <code>settings -&gt; custom domain</code> ，设置自己域名，然后 <code>save</code> 即可。</p>\n<p>然后在本地博客项目文件夹目录下，输入以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>现在在浏览器地址栏输入个性化域名即可访问博客。</p>\n<h3 id=\"个性化主题\"><a href=\"#个性化主题\" class=\"headerlink\" title=\"个性化主题\"></a>个性化主题</h3><p>Hexo 有许多有趣好看的主题供大家选择，可以直接看<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">这里</a>，选取心仪的主题，大部分主题都有安装步骤，跟着安装步骤安装即可。</p>\n<h3 id=\"常用命令介绍\"><a href=\"#常用命令介绍\" class=\"headerlink\" title=\"常用命令介绍\"></a>常用命令介绍</h3><p>博客大体已经完成，最常用的就几条命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean # 清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g # hexo generate 简写</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d # hexo deploy 简写</span><br></pre></td></tr></table></figure>\n\n<p>其他常用命令介绍：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update hexo -g #升级 </span><br><span class=\"line\"></span><br><span class=\"line\">hexo init #初始化博客</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>大家可以尝试更多好玩的，以及尝试更多好看的主题，😄<br><br>关于图片大家可以选择图床进行上传文件</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo 文档</a></li>\n</ul>\n"},{"title":"关于二维数组修改键值、sql 语句一对多查询的问题","date":"2018-12-27T13:21:10.000Z","_content":"### 背景\n今天在撸代码时，遇到一个个人需求，有两个数组（一个是二维， A/B），A 想通过一个键值获取 B（二维） 的值，所以需要修改 B 的键值。\n还有一个个人需求，在写 sql 时，需要写一对多查询，其实使用模型查询更简单，但是时多库查询，所以还是使用了原生 sql 写。\n### 解决方案\n#### 修改数组键值\n使用 `array_column($arr, NULL, 'key_name');` 即可，但是会产生一个新数组\n#### sql 一对多查询\n使用 `GROUP_CONCAT ` 即可\n","source":"_posts/关于二维数组修改键值、sql-语句一对多查询的问题.md","raw":"---\ntitle: 关于二维数组修改键值、sql 语句一对多查询的问题\ndate: 2018-12-27 21:21:10\ntags:\n---\n### 背景\n今天在撸代码时，遇到一个个人需求，有两个数组（一个是二维， A/B），A 想通过一个键值获取 B（二维） 的值，所以需要修改 B 的键值。\n还有一个个人需求，在写 sql 时，需要写一对多查询，其实使用模型查询更简单，但是时多库查询，所以还是使用了原生 sql 写。\n### 解决方案\n#### 修改数组键值\n使用 `array_column($arr, NULL, 'key_name');` 即可，但是会产生一个新数组\n#### sql 一对多查询\n使用 `GROUP_CONCAT ` 即可\n","slug":"关于二维数组修改键值、sql-语句一对多查询的问题","published":1,"updated":"2019-06-09T07:09:52.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuldd0005vizqkjvftmsm","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>今天在撸代码时，遇到一个个人需求，有两个数组（一个是二维， A/B），A 想通过一个键值获取 B（二维） 的值，所以需要修改 B 的键值。<br>还有一个个人需求，在写 sql 时，需要写一对多查询，其实使用模型查询更简单，但是时多库查询，所以还是使用了原生 sql 写。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"修改数组键值\"><a href=\"#修改数组键值\" class=\"headerlink\" title=\"修改数组键值\"></a>修改数组键值</h4><p>使用 <code>array_column($arr, NULL, &#39;key_name&#39;);</code> 即可，但是会产生一个新数组</p>\n<h4 id=\"sql-一对多查询\"><a href=\"#sql-一对多查询\" class=\"headerlink\" title=\"sql 一对多查询\"></a>sql 一对多查询</h4><p>使用 <code>GROUP_CONCAT</code> 即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>今天在撸代码时，遇到一个个人需求，有两个数组（一个是二维， A/B），A 想通过一个键值获取 B（二维） 的值，所以需要修改 B 的键值。<br>还有一个个人需求，在写 sql 时，需要写一对多查询，其实使用模型查询更简单，但是时多库查询，所以还是使用了原生 sql 写。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"修改数组键值\"><a href=\"#修改数组键值\" class=\"headerlink\" title=\"修改数组键值\"></a>修改数组键值</h4><p>使用 <code>array_column($arr, NULL, &#39;key_name&#39;);</code> 即可，但是会产生一个新数组</p>\n<h4 id=\"sql-一对多查询\"><a href=\"#sql-一对多查询\" class=\"headerlink\" title=\"sql 一对多查询\"></a>sql 一对多查询</h4><p>使用 <code>GROUP_CONCAT</code> 即可</p>\n"},{"title":"深入了解页 InnoDB 存储结构","date":"2019-06-14T10:32:49.000Z","_content":"本篇文章是读掘金《MySQL是怎样运行的》其中`InnoDB数据页结构`一篇的总结“<span style=\"color:red\">强烈推荐</span>”\n\n---\n### InnoDB 数据页结构介绍\n\n\n### InnoDB 磁盘管理的最小存储单位【页】\n\n","source":"_posts/深入了解MySQL数据存储.md","raw":"---\ntitle: 深入了解页 InnoDB 存储结构\ndate: 2019-06-14 18:32:49\ntags: 数据库\n\n---\n本篇文章是读掘金《MySQL是怎样运行的》其中`InnoDB数据页结构`一篇的总结“<span style=\"color:red\">强烈推荐</span>”\n\n---\n### InnoDB 数据页结构介绍\n\n\n### InnoDB 磁盘管理的最小存储单位【页】\n\n","slug":"深入了解MySQL数据存储","published":1,"updated":"2019-06-14T14:04:23.002Z","_id":"cjwvyuldf0006vizqtny9o4b1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本篇文章是读掘金《MySQL是怎样运行的》其中<code>InnoDB数据页结构</code>一篇的总结“<span style=\"color:red\">强烈推荐</span>”</p>\n<hr>\n<h3 id=\"InnoDB-数据页结构介绍\"><a href=\"#InnoDB-数据页结构介绍\" class=\"headerlink\" title=\"InnoDB 数据页结构介绍\"></a>InnoDB 数据页结构介绍</h3><h3 id=\"InnoDB-磁盘管理的最小存储单位【页】\"><a href=\"#InnoDB-磁盘管理的最小存储单位【页】\" class=\"headerlink\" title=\"InnoDB 磁盘管理的最小存储单位【页】\"></a>InnoDB 磁盘管理的最小存储单位【页】</h3>","site":{"data":{}},"excerpt":"","more":"<p>本篇文章是读掘金《MySQL是怎样运行的》其中<code>InnoDB数据页结构</code>一篇的总结“<span style=\"color:red\">强烈推荐</span>”</p>\n<hr>\n<h3 id=\"InnoDB-数据页结构介绍\"><a href=\"#InnoDB-数据页结构介绍\" class=\"headerlink\" title=\"InnoDB 数据页结构介绍\"></a>InnoDB 数据页结构介绍</h3><h3 id=\"InnoDB-磁盘管理的最小存储单位【页】\"><a href=\"#InnoDB-磁盘管理的最小存储单位【页】\" class=\"headerlink\" title=\"InnoDB 磁盘管理的最小存储单位【页】\"></a>InnoDB 磁盘管理的最小存储单位【页】</h3>"},{"title":"即将毕业的 phper 的自述","date":"2019-03-23T08:53:41.000Z","_content":"### 大一的小萌新\n在大学之前几乎没有接触过编程语言，对编程没有很大的好奇心，在学了 vfp 的时候，才对编程有了一点点的认识。<br>\n从大一开始，和大部分人都一样，参加学生会，加入各种个样的社团，我准备参加一个学生会的其中一个社团吧，最后落选了 😭（现在想想幸好当时没有加入学生会），然后和室友加入了轮滑社，特意买了双轮滑鞋，现在还在宿舍吃灰呢。。。<br>\n现在还记得，那时是大一上学期 11 月份左右，学校的一个编程实验室（E8）招新，当时就特别想加入进去，当时报名的人特别特别的多，几百吧，我当时并没有觉得没有什么机会，但是进入工作室之前会有一段时间对我们这些报名的同学进行短时间的一个培训，说白了就是教我们一些 web 基础，如何开发一个项目吧。<br>\n我参加了工作室的第一次项目答辩，当时的要求是做一个百度搜索的页面，仅仅是一个页面，当时很认真的做，但是很不好看，不知道过没过，然后工作室又开始培训了 php，好像是，之前培训的都是 html，怪自己不争气吧，没有坚持下来，所以就不了了之了。然后大一就这样慢慢的过来了，每天都是玩啊，打游戏啊，睡觉啊。现在想想挺无聊的，但是也没那么后悔，大一是这样过来的。<br>\n\n### 大二的小油条\n时间到了大二，没有大一时啥都不懂，对啥都好奇的时候了，上半学期还是经常的打游戏，睡觉，出去玩啥的，但是当时心里已经有了，不能再这样下去了，得学习了，不然毕业了都没人要的，这仅仅只是心里的一个想法而已。<br>\n又到了工作室一年一度的招新时刻，因为大二了嘛，所以学起来不像当初那么难了，工作室那一年的培训有所不同，采取前后端分离的方式，我当时觉得前端基础我已经掌握的差不多了，所以我毅然决然的选了后端方向。<br>\n所以入坑的时间就是大二下学期开学的时候，哈哈，回想了下，当时的作品，自我觉得那时做的作品还是很不错的（当时我在家做的时候，觉得这是一个很了不起的项目，当时还和我爸说，我做的这东西，就算工作一年了的人也不一定能做出来，现在想想，当时对外面的世界了解的也太少了吧），项目就是一个电商网站，贼简陋（后来加入工作室后，好像还给一个学姐做为毕业设计了。。。佩服她），这也是我学 php 的最开始。<br>\n加入工作室后，就慢慢的自学了很多其他的东西，比如简单的前端知识，还有设计模式（现在对这个了解还不是很多），还有 mvc ，学完 mvc 就看网上教程，跟着做了一个 mvc 框架，还用这个框架和前端同学一起做项目参加比赛。。佩服当时自己的勇气，哈哈，因为工作室参赛名额有限，我们的作品好像没有上报到省里，更别说什么奖了，当时挺失望的，毕竟做了那么久的东西嘛。<br>\n自从比赛完后，就开始正式的学 Laravel 了，那时好像是 5.4 版本刚出来的阶段，算是入坑比较晚了。为啥学这个框架，就要说到一位大佬了，一届一班的（惭愧）。。极力推荐的一个框架，所以我们工作当时都在学都在用这个框架，还是挺前卫的。然后就是大二暑假了，一直在学车，就没怎么学，当时被工作室老师，一顿说。。其实去工作室时间还是有的，当时还是贪玩，就不想去，所以就浪费了一个暑假的时间。<br>\n\n### 大三的老油条\n时间到了大三，在工作室也小半年了，没有当时刚进来时的那种感觉了，但对编程的热情还是丝毫没有减退。<br>\n那时的技术栈还仅仅只有前端的知识仅限于知道大概，laravel 都不敢做大项目的程度，其他的都别说了，当时觉得没有啥，现在觉得当时的自己太菜了吧。那时对编程的热情特别高，大部分晚上看教程敲代码，一般都到晚上 1 点多吧（同样受大佬影响。。）。<br>\n又到了工作室招新的时候了，我就作为了后端培训学长了，当时觉得压力挺大的。现在想想也没必要紧张（紧张这个毛病到现在也改不掉。。），因为要写个 demo 给他们看看，所以我就花了一个晚上完成了，其实时间很够，我都没有放在心上，后来网站被 xss 攻击了，当时真的是脸都没了，以至于到现在我就特别特别的注重安全方面。<br>\n培训结束后，去工作室的频率越来越少了，慢慢的就不去了，原因的话，太不喜欢工作室的环境了，抱团严重，自己性格又是那种孤僻的人，所以待在工作室就感觉特别压抑，不如在宿舍放松。所以就在宿舍学了，当然效率大大不如在工作室学习了。<br>\n有一个老师让我们写以后会干什么，我现在还记得我当时写的东西，现在想想那时对编程的热情好高。\n\n### 大四的离开\n大四的所有时间都在外面实习，实习的经历在 2018 年总结回顾的时候说过，就不在这面条式的文章里写了。。。\n\n---\n写这些只是记录下学习 php 的历程，如果你看到了最后，真的很感谢，文笔很不好，也在慢慢改善。","source":"_posts/即将毕业的-phper-的自述.md","raw":"---\ntitle: 即将毕业的 phper 的自述\ndate: 2019-03-23 16:53:41\ntags:\n---\n### 大一的小萌新\n在大学之前几乎没有接触过编程语言，对编程没有很大的好奇心，在学了 vfp 的时候，才对编程有了一点点的认识。<br>\n从大一开始，和大部分人都一样，参加学生会，加入各种个样的社团，我准备参加一个学生会的其中一个社团吧，最后落选了 😭（现在想想幸好当时没有加入学生会），然后和室友加入了轮滑社，特意买了双轮滑鞋，现在还在宿舍吃灰呢。。。<br>\n现在还记得，那时是大一上学期 11 月份左右，学校的一个编程实验室（E8）招新，当时就特别想加入进去，当时报名的人特别特别的多，几百吧，我当时并没有觉得没有什么机会，但是进入工作室之前会有一段时间对我们这些报名的同学进行短时间的一个培训，说白了就是教我们一些 web 基础，如何开发一个项目吧。<br>\n我参加了工作室的第一次项目答辩，当时的要求是做一个百度搜索的页面，仅仅是一个页面，当时很认真的做，但是很不好看，不知道过没过，然后工作室又开始培训了 php，好像是，之前培训的都是 html，怪自己不争气吧，没有坚持下来，所以就不了了之了。然后大一就这样慢慢的过来了，每天都是玩啊，打游戏啊，睡觉啊。现在想想挺无聊的，但是也没那么后悔，大一是这样过来的。<br>\n\n### 大二的小油条\n时间到了大二，没有大一时啥都不懂，对啥都好奇的时候了，上半学期还是经常的打游戏，睡觉，出去玩啥的，但是当时心里已经有了，不能再这样下去了，得学习了，不然毕业了都没人要的，这仅仅只是心里的一个想法而已。<br>\n又到了工作室一年一度的招新时刻，因为大二了嘛，所以学起来不像当初那么难了，工作室那一年的培训有所不同，采取前后端分离的方式，我当时觉得前端基础我已经掌握的差不多了，所以我毅然决然的选了后端方向。<br>\n所以入坑的时间就是大二下学期开学的时候，哈哈，回想了下，当时的作品，自我觉得那时做的作品还是很不错的（当时我在家做的时候，觉得这是一个很了不起的项目，当时还和我爸说，我做的这东西，就算工作一年了的人也不一定能做出来，现在想想，当时对外面的世界了解的也太少了吧），项目就是一个电商网站，贼简陋（后来加入工作室后，好像还给一个学姐做为毕业设计了。。。佩服她），这也是我学 php 的最开始。<br>\n加入工作室后，就慢慢的自学了很多其他的东西，比如简单的前端知识，还有设计模式（现在对这个了解还不是很多），还有 mvc ，学完 mvc 就看网上教程，跟着做了一个 mvc 框架，还用这个框架和前端同学一起做项目参加比赛。。佩服当时自己的勇气，哈哈，因为工作室参赛名额有限，我们的作品好像没有上报到省里，更别说什么奖了，当时挺失望的，毕竟做了那么久的东西嘛。<br>\n自从比赛完后，就开始正式的学 Laravel 了，那时好像是 5.4 版本刚出来的阶段，算是入坑比较晚了。为啥学这个框架，就要说到一位大佬了，一届一班的（惭愧）。。极力推荐的一个框架，所以我们工作当时都在学都在用这个框架，还是挺前卫的。然后就是大二暑假了，一直在学车，就没怎么学，当时被工作室老师，一顿说。。其实去工作室时间还是有的，当时还是贪玩，就不想去，所以就浪费了一个暑假的时间。<br>\n\n### 大三的老油条\n时间到了大三，在工作室也小半年了，没有当时刚进来时的那种感觉了，但对编程的热情还是丝毫没有减退。<br>\n那时的技术栈还仅仅只有前端的知识仅限于知道大概，laravel 都不敢做大项目的程度，其他的都别说了，当时觉得没有啥，现在觉得当时的自己太菜了吧。那时对编程的热情特别高，大部分晚上看教程敲代码，一般都到晚上 1 点多吧（同样受大佬影响。。）。<br>\n又到了工作室招新的时候了，我就作为了后端培训学长了，当时觉得压力挺大的。现在想想也没必要紧张（紧张这个毛病到现在也改不掉。。），因为要写个 demo 给他们看看，所以我就花了一个晚上完成了，其实时间很够，我都没有放在心上，后来网站被 xss 攻击了，当时真的是脸都没了，以至于到现在我就特别特别的注重安全方面。<br>\n培训结束后，去工作室的频率越来越少了，慢慢的就不去了，原因的话，太不喜欢工作室的环境了，抱团严重，自己性格又是那种孤僻的人，所以待在工作室就感觉特别压抑，不如在宿舍放松。所以就在宿舍学了，当然效率大大不如在工作室学习了。<br>\n有一个老师让我们写以后会干什么，我现在还记得我当时写的东西，现在想想那时对编程的热情好高。\n\n### 大四的离开\n大四的所有时间都在外面实习，实习的经历在 2018 年总结回顾的时候说过，就不在这面条式的文章里写了。。。\n\n---\n写这些只是记录下学习 php 的历程，如果你看到了最后，真的很感谢，文笔很不好，也在慢慢改善。","slug":"即将毕业的-phper-的自述","published":1,"updated":"2019-06-09T07:08:07.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuldg0007vizq69uwhucd","content":"<h3 id=\"大一的小萌新\"><a href=\"#大一的小萌新\" class=\"headerlink\" title=\"大一的小萌新\"></a>大一的小萌新</h3><p>在大学之前几乎没有接触过编程语言，对编程没有很大的好奇心，在学了 vfp 的时候，才对编程有了一点点的认识。<br><br>从大一开始，和大部分人都一样，参加学生会，加入各种个样的社团，我准备参加一个学生会的其中一个社团吧，最后落选了 😭（现在想想幸好当时没有加入学生会），然后和室友加入了轮滑社，特意买了双轮滑鞋，现在还在宿舍吃灰呢。。。<br><br>现在还记得，那时是大一上学期 11 月份左右，学校的一个编程实验室（E8）招新，当时就特别想加入进去，当时报名的人特别特别的多，几百吧，我当时并没有觉得没有什么机会，但是进入工作室之前会有一段时间对我们这些报名的同学进行短时间的一个培训，说白了就是教我们一些 web 基础，如何开发一个项目吧。<br><br>我参加了工作室的第一次项目答辩，当时的要求是做一个百度搜索的页面，仅仅是一个页面，当时很认真的做，但是很不好看，不知道过没过，然后工作室又开始培训了 php，好像是，之前培训的都是 html，怪自己不争气吧，没有坚持下来，所以就不了了之了。然后大一就这样慢慢的过来了，每天都是玩啊，打游戏啊，睡觉啊。现在想想挺无聊的，但是也没那么后悔，大一是这样过来的。<br></p>\n<h3 id=\"大二的小油条\"><a href=\"#大二的小油条\" class=\"headerlink\" title=\"大二的小油条\"></a>大二的小油条</h3><p>时间到了大二，没有大一时啥都不懂，对啥都好奇的时候了，上半学期还是经常的打游戏，睡觉，出去玩啥的，但是当时心里已经有了，不能再这样下去了，得学习了，不然毕业了都没人要的，这仅仅只是心里的一个想法而已。<br><br>又到了工作室一年一度的招新时刻，因为大二了嘛，所以学起来不像当初那么难了，工作室那一年的培训有所不同，采取前后端分离的方式，我当时觉得前端基础我已经掌握的差不多了，所以我毅然决然的选了后端方向。<br><br>所以入坑的时间就是大二下学期开学的时候，哈哈，回想了下，当时的作品，自我觉得那时做的作品还是很不错的（当时我在家做的时候，觉得这是一个很了不起的项目，当时还和我爸说，我做的这东西，就算工作一年了的人也不一定能做出来，现在想想，当时对外面的世界了解的也太少了吧），项目就是一个电商网站，贼简陋（后来加入工作室后，好像还给一个学姐做为毕业设计了。。。佩服她），这也是我学 php 的最开始。<br><br>加入工作室后，就慢慢的自学了很多其他的东西，比如简单的前端知识，还有设计模式（现在对这个了解还不是很多），还有 mvc ，学完 mvc 就看网上教程，跟着做了一个 mvc 框架，还用这个框架和前端同学一起做项目参加比赛。。佩服当时自己的勇气，哈哈，因为工作室参赛名额有限，我们的作品好像没有上报到省里，更别说什么奖了，当时挺失望的，毕竟做了那么久的东西嘛。<br><br>自从比赛完后，就开始正式的学 Laravel 了，那时好像是 5.4 版本刚出来的阶段，算是入坑比较晚了。为啥学这个框架，就要说到一位大佬了，一届一班的（惭愧）。。极力推荐的一个框架，所以我们工作当时都在学都在用这个框架，还是挺前卫的。然后就是大二暑假了，一直在学车，就没怎么学，当时被工作室老师，一顿说。。其实去工作室时间还是有的，当时还是贪玩，就不想去，所以就浪费了一个暑假的时间。<br></p>\n<h3 id=\"大三的老油条\"><a href=\"#大三的老油条\" class=\"headerlink\" title=\"大三的老油条\"></a>大三的老油条</h3><p>时间到了大三，在工作室也小半年了，没有当时刚进来时的那种感觉了，但对编程的热情还是丝毫没有减退。<br><br>那时的技术栈还仅仅只有前端的知识仅限于知道大概，laravel 都不敢做大项目的程度，其他的都别说了，当时觉得没有啥，现在觉得当时的自己太菜了吧。那时对编程的热情特别高，大部分晚上看教程敲代码，一般都到晚上 1 点多吧（同样受大佬影响。。）。<br><br>又到了工作室招新的时候了，我就作为了后端培训学长了，当时觉得压力挺大的。现在想想也没必要紧张（紧张这个毛病到现在也改不掉。。），因为要写个 demo 给他们看看，所以我就花了一个晚上完成了，其实时间很够，我都没有放在心上，后来网站被 xss 攻击了，当时真的是脸都没了，以至于到现在我就特别特别的注重安全方面。<br><br>培训结束后，去工作室的频率越来越少了，慢慢的就不去了，原因的话，太不喜欢工作室的环境了，抱团严重，自己性格又是那种孤僻的人，所以待在工作室就感觉特别压抑，不如在宿舍放松。所以就在宿舍学了，当然效率大大不如在工作室学习了。<br><br>有一个老师让我们写以后会干什么，我现在还记得我当时写的东西，现在想想那时对编程的热情好高。</p>\n<h3 id=\"大四的离开\"><a href=\"#大四的离开\" class=\"headerlink\" title=\"大四的离开\"></a>大四的离开</h3><p>大四的所有时间都在外面实习，实习的经历在 2018 年总结回顾的时候说过，就不在这面条式的文章里写了。。。</p>\n<hr>\n<p>写这些只是记录下学习 php 的历程，如果你看到了最后，真的很感谢，文笔很不好，也在慢慢改善。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"大一的小萌新\"><a href=\"#大一的小萌新\" class=\"headerlink\" title=\"大一的小萌新\"></a>大一的小萌新</h3><p>在大学之前几乎没有接触过编程语言，对编程没有很大的好奇心，在学了 vfp 的时候，才对编程有了一点点的认识。<br><br>从大一开始，和大部分人都一样，参加学生会，加入各种个样的社团，我准备参加一个学生会的其中一个社团吧，最后落选了 😭（现在想想幸好当时没有加入学生会），然后和室友加入了轮滑社，特意买了双轮滑鞋，现在还在宿舍吃灰呢。。。<br><br>现在还记得，那时是大一上学期 11 月份左右，学校的一个编程实验室（E8）招新，当时就特别想加入进去，当时报名的人特别特别的多，几百吧，我当时并没有觉得没有什么机会，但是进入工作室之前会有一段时间对我们这些报名的同学进行短时间的一个培训，说白了就是教我们一些 web 基础，如何开发一个项目吧。<br><br>我参加了工作室的第一次项目答辩，当时的要求是做一个百度搜索的页面，仅仅是一个页面，当时很认真的做，但是很不好看，不知道过没过，然后工作室又开始培训了 php，好像是，之前培训的都是 html，怪自己不争气吧，没有坚持下来，所以就不了了之了。然后大一就这样慢慢的过来了，每天都是玩啊，打游戏啊，睡觉啊。现在想想挺无聊的，但是也没那么后悔，大一是这样过来的。<br></p>\n<h3 id=\"大二的小油条\"><a href=\"#大二的小油条\" class=\"headerlink\" title=\"大二的小油条\"></a>大二的小油条</h3><p>时间到了大二，没有大一时啥都不懂，对啥都好奇的时候了，上半学期还是经常的打游戏，睡觉，出去玩啥的，但是当时心里已经有了，不能再这样下去了，得学习了，不然毕业了都没人要的，这仅仅只是心里的一个想法而已。<br><br>又到了工作室一年一度的招新时刻，因为大二了嘛，所以学起来不像当初那么难了，工作室那一年的培训有所不同，采取前后端分离的方式，我当时觉得前端基础我已经掌握的差不多了，所以我毅然决然的选了后端方向。<br><br>所以入坑的时间就是大二下学期开学的时候，哈哈，回想了下，当时的作品，自我觉得那时做的作品还是很不错的（当时我在家做的时候，觉得这是一个很了不起的项目，当时还和我爸说，我做的这东西，就算工作一年了的人也不一定能做出来，现在想想，当时对外面的世界了解的也太少了吧），项目就是一个电商网站，贼简陋（后来加入工作室后，好像还给一个学姐做为毕业设计了。。。佩服她），这也是我学 php 的最开始。<br><br>加入工作室后，就慢慢的自学了很多其他的东西，比如简单的前端知识，还有设计模式（现在对这个了解还不是很多），还有 mvc ，学完 mvc 就看网上教程，跟着做了一个 mvc 框架，还用这个框架和前端同学一起做项目参加比赛。。佩服当时自己的勇气，哈哈，因为工作室参赛名额有限，我们的作品好像没有上报到省里，更别说什么奖了，当时挺失望的，毕竟做了那么久的东西嘛。<br><br>自从比赛完后，就开始正式的学 Laravel 了，那时好像是 5.4 版本刚出来的阶段，算是入坑比较晚了。为啥学这个框架，就要说到一位大佬了，一届一班的（惭愧）。。极力推荐的一个框架，所以我们工作当时都在学都在用这个框架，还是挺前卫的。然后就是大二暑假了，一直在学车，就没怎么学，当时被工作室老师，一顿说。。其实去工作室时间还是有的，当时还是贪玩，就不想去，所以就浪费了一个暑假的时间。<br></p>\n<h3 id=\"大三的老油条\"><a href=\"#大三的老油条\" class=\"headerlink\" title=\"大三的老油条\"></a>大三的老油条</h3><p>时间到了大三，在工作室也小半年了，没有当时刚进来时的那种感觉了，但对编程的热情还是丝毫没有减退。<br><br>那时的技术栈还仅仅只有前端的知识仅限于知道大概，laravel 都不敢做大项目的程度，其他的都别说了，当时觉得没有啥，现在觉得当时的自己太菜了吧。那时对编程的热情特别高，大部分晚上看教程敲代码，一般都到晚上 1 点多吧（同样受大佬影响。。）。<br><br>又到了工作室招新的时候了，我就作为了后端培训学长了，当时觉得压力挺大的。现在想想也没必要紧张（紧张这个毛病到现在也改不掉。。），因为要写个 demo 给他们看看，所以我就花了一个晚上完成了，其实时间很够，我都没有放在心上，后来网站被 xss 攻击了，当时真的是脸都没了，以至于到现在我就特别特别的注重安全方面。<br><br>培训结束后，去工作室的频率越来越少了，慢慢的就不去了，原因的话，太不喜欢工作室的环境了，抱团严重，自己性格又是那种孤僻的人，所以待在工作室就感觉特别压抑，不如在宿舍放松。所以就在宿舍学了，当然效率大大不如在工作室学习了。<br><br>有一个老师让我们写以后会干什么，我现在还记得我当时写的东西，现在想想那时对编程的热情好高。</p>\n<h3 id=\"大四的离开\"><a href=\"#大四的离开\" class=\"headerlink\" title=\"大四的离开\"></a>大四的离开</h3><p>大四的所有时间都在外面实习，实习的经历在 2018 年总结回顾的时候说过，就不在这面条式的文章里写了。。。</p>\n<hr>\n<p>写这些只是记录下学习 php 的历程，如果你看到了最后，真的很感谢，文笔很不好，也在慢慢改善。</p>\n"},{"title":"善于使用搜索引擎不好吗","date":"2019-03-24T13:42:38.000Z","_content":"#### 0x00\n很奇怪为什么有些人宁愿问别人，也不愿意自己使用搜索引擎去找答案，问别人，别人可能需要花时间去告诉你怎样去解决问题，但是下次遇到呢，还要再去问别人吗？或者换个人去问？\n#### 0x01\n不论是身边的同学，还是论坛里的问题，都是很简单的问题，比如报错不知道怎么解决，环境有问题，composer 下载不了 laravel 等等，其实出现问题的时候，需要认真的去看下报错信息，或者看下日志，分析下问题，因为在出错的时候，报错信息或者日志已经告诉你问题在哪里了，有的甚至告诉你应该怎么办，而大部分的人选择去问别人甚至在论坛里面把报错信息贴在上面，等着大家去回答，这完全是在浪费自己的时间。\n#### 0x02\n所以在 2019 年了，大家应该善于使用搜索引擎，有时候搜索引擎的答案会比问别人会更可靠。","source":"_posts/善于使用搜索引擎不好吗.md","raw":"---\ntitle: 善于使用搜索引擎不好吗\ndate: 2019-03-24 21:42:38\ntags:\n---\n#### 0x00\n很奇怪为什么有些人宁愿问别人，也不愿意自己使用搜索引擎去找答案，问别人，别人可能需要花时间去告诉你怎样去解决问题，但是下次遇到呢，还要再去问别人吗？或者换个人去问？\n#### 0x01\n不论是身边的同学，还是论坛里的问题，都是很简单的问题，比如报错不知道怎么解决，环境有问题，composer 下载不了 laravel 等等，其实出现问题的时候，需要认真的去看下报错信息，或者看下日志，分析下问题，因为在出错的时候，报错信息或者日志已经告诉你问题在哪里了，有的甚至告诉你应该怎么办，而大部分的人选择去问别人甚至在论坛里面把报错信息贴在上面，等着大家去回答，这完全是在浪费自己的时间。\n#### 0x02\n所以在 2019 年了，大家应该善于使用搜索引擎，有时候搜索引擎的答案会比问别人会更可靠。","slug":"善于使用搜索引擎不好吗","published":1,"updated":"2019-06-09T07:06:23.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuldl0009vizqye98y5ij","content":"<h4 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h4><p>很奇怪为什么有些人宁愿问别人，也不愿意自己使用搜索引擎去找答案，问别人，别人可能需要花时间去告诉你怎样去解决问题，但是下次遇到呢，还要再去问别人吗？或者换个人去问？</p>\n<h4 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h4><p>不论是身边的同学，还是论坛里的问题，都是很简单的问题，比如报错不知道怎么解决，环境有问题，composer 下载不了 laravel 等等，其实出现问题的时候，需要认真的去看下报错信息，或者看下日志，分析下问题，因为在出错的时候，报错信息或者日志已经告诉你问题在哪里了，有的甚至告诉你应该怎么办，而大部分的人选择去问别人甚至在论坛里面把报错信息贴在上面，等着大家去回答，这完全是在浪费自己的时间。</p>\n<h4 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h4><p>所以在 2019 年了，大家应该善于使用搜索引擎，有时候搜索引擎的答案会比问别人会更可靠。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h4><p>很奇怪为什么有些人宁愿问别人，也不愿意自己使用搜索引擎去找答案，问别人，别人可能需要花时间去告诉你怎样去解决问题，但是下次遇到呢，还要再去问别人吗？或者换个人去问？</p>\n<h4 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h4><p>不论是身边的同学，还是论坛里的问题，都是很简单的问题，比如报错不知道怎么解决，环境有问题，composer 下载不了 laravel 等等，其实出现问题的时候，需要认真的去看下报错信息，或者看下日志，分析下问题，因为在出错的时候，报错信息或者日志已经告诉你问题在哪里了，有的甚至告诉你应该怎么办，而大部分的人选择去问别人甚至在论坛里面把报错信息贴在上面，等着大家去回答，这完全是在浪费自己的时间。</p>\n<h4 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h4><p>所以在 2019 年了，大家应该善于使用搜索引擎，有时候搜索引擎的答案会比问别人会更可靠。</p>\n"},{"title":"如何搭建 RabbitMQ 至本地服务器","date":"2018-12-06T14:17:12.000Z","_content":"公司使用 RabbitMQ 来作消息队列，所以还是有必要学习以下 RabbitMQ 的（之前只有听说过没有接触过，所以还是趁早学比较好，😄）\n本文参考：安装：https://blog.csdn.net/nextyu/article/details/79250174 <br>\n错误：https://mysteps4learning.wordpress.com/2014/06/10/how-to-resolve-error-unauthorized-while-logging-to-rabbitmq-web-management/\n### 环境：\nUbuntu 16.04\n### 一、安装 Erlang\n因为 RabbitMQ 是 Erlang 语言编写的，所以在安装 RabbitMQ 前，还是需要安装 Erlang 的。\n首先在系统中添加 Erlang 库\n```\nwget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb\nsudo dpkg -i erlang-solutions_1.0_all.deb\n```\n接着\n```\nsudo apt-get update\nsudo apt-get install erlang erlang-nox\n```\n\n### 二、安装 RabbitMQ\n需要先在系统中加入 rabbitmq apt 仓库，再加入 rabbitmq signing key。\n```shell\necho 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list\nwget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -\n\nsudo apt-get update\nsudo apt-get install rabbitmq-server\n```\n\n这样就安装完成，在安装的过程中我并没有遇到什么问题、困难（没啥坑）\n\n### 三、启用 RabbitMQ Web 管理插件\n```shell\nsudo rabbitmq-plugins enable rabbitmq_management\n```\n重启服务器\n```shell\nsudo systemctl restart rabbitmq-server\n```\n访问 `http://localhost:15672` ，默认账户、密码 `guest/guest`（图就不贴了。。编辑器没法获取粘贴板的图片。。）\n\n这里我遇到一个坑。。。\n会出现：\n```shell\n=ERROR REPORT==== 10-Jun-2014::10:27:17 ===\nwebmachine error: path=\"/api/whoami\"\n\"Unauthorized\"\n```\n解决的办法：\n1. Add a new/fresh user, say user ‘test’ and password ‘test’\n```shell\nrabbitmqctl add_user test test\n```\n2.  Give administrative access to the new access\n```shell\nrabbitmqctl set_user_tags test administrator\n```\n3.  Set permission to newly created user\n```shell\nrabbitmqctl set_permissions -p / test \".*\" \".*\" \".*\"\n```\n下载好 rabbitmq 之后，在 `/etc/rabbitmq` 目录下面默认没有配置文件，需要单独下载，[下载地址](https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example)\n下载完成后重命名为 `rabbitmq.config`，接着找到 `lookback_users` 的地方去掉注释，修改好后的 `rabbitmq.config` 放置在 `/etc/rabbitmq` 目录下面\n\n然后重启服务器\n```shell\nsudo systemctl restart rabbitmq-server\n```\n然后就可以在其他地址下登录\n","source":"_posts/如何搭建-RabbitMQ-至本地服务器.md","raw":"---\ntitle: 如何搭建 RabbitMQ 至本地服务器\ndate: 2018-12-06 22:17:12\ntags:\n---\n公司使用 RabbitMQ 来作消息队列，所以还是有必要学习以下 RabbitMQ 的（之前只有听说过没有接触过，所以还是趁早学比较好，😄）\n本文参考：安装：https://blog.csdn.net/nextyu/article/details/79250174 <br>\n错误：https://mysteps4learning.wordpress.com/2014/06/10/how-to-resolve-error-unauthorized-while-logging-to-rabbitmq-web-management/\n### 环境：\nUbuntu 16.04\n### 一、安装 Erlang\n因为 RabbitMQ 是 Erlang 语言编写的，所以在安装 RabbitMQ 前，还是需要安装 Erlang 的。\n首先在系统中添加 Erlang 库\n```\nwget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb\nsudo dpkg -i erlang-solutions_1.0_all.deb\n```\n接着\n```\nsudo apt-get update\nsudo apt-get install erlang erlang-nox\n```\n\n### 二、安装 RabbitMQ\n需要先在系统中加入 rabbitmq apt 仓库，再加入 rabbitmq signing key。\n```shell\necho 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list\nwget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -\n\nsudo apt-get update\nsudo apt-get install rabbitmq-server\n```\n\n这样就安装完成，在安装的过程中我并没有遇到什么问题、困难（没啥坑）\n\n### 三、启用 RabbitMQ Web 管理插件\n```shell\nsudo rabbitmq-plugins enable rabbitmq_management\n```\n重启服务器\n```shell\nsudo systemctl restart rabbitmq-server\n```\n访问 `http://localhost:15672` ，默认账户、密码 `guest/guest`（图就不贴了。。编辑器没法获取粘贴板的图片。。）\n\n这里我遇到一个坑。。。\n会出现：\n```shell\n=ERROR REPORT==== 10-Jun-2014::10:27:17 ===\nwebmachine error: path=\"/api/whoami\"\n\"Unauthorized\"\n```\n解决的办法：\n1. Add a new/fresh user, say user ‘test’ and password ‘test’\n```shell\nrabbitmqctl add_user test test\n```\n2.  Give administrative access to the new access\n```shell\nrabbitmqctl set_user_tags test administrator\n```\n3.  Set permission to newly created user\n```shell\nrabbitmqctl set_permissions -p / test \".*\" \".*\" \".*\"\n```\n下载好 rabbitmq 之后，在 `/etc/rabbitmq` 目录下面默认没有配置文件，需要单独下载，[下载地址](https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example)\n下载完成后重命名为 `rabbitmq.config`，接着找到 `lookback_users` 的地方去掉注释，修改好后的 `rabbitmq.config` 放置在 `/etc/rabbitmq` 目录下面\n\n然后重启服务器\n```shell\nsudo systemctl restart rabbitmq-server\n```\n然后就可以在其他地址下登录\n","slug":"如何搭建-RabbitMQ-至本地服务器","published":1,"updated":"2019-06-09T07:10:34.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvyuldm000avizqf4ujup4l","content":"<p>公司使用 RabbitMQ 来作消息队列，所以还是有必要学习以下 RabbitMQ 的（之前只有听说过没有接触过，所以还是趁早学比较好，😄）<br>本文参考：安装：<a href=\"https://blog.csdn.net/nextyu/article/details/79250174\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/nextyu/article/details/79250174</a> <br><br>错误：<a href=\"https://mysteps4learning.wordpress.com/2014/06/10/how-to-resolve-error-unauthorized-while-logging-to-rabbitmq-web-management/\" target=\"_blank\" rel=\"noopener\">https://mysteps4learning.wordpress.com/2014/06/10/how-to-resolve-error-unauthorized-while-logging-to-rabbitmq-web-management/</a></p>\n<h3 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h3><p>Ubuntu 16.04</p>\n<h3 id=\"一、安装-Erlang\"><a href=\"#一、安装-Erlang\" class=\"headerlink\" title=\"一、安装 Erlang\"></a>一、安装 Erlang</h3><p>因为 RabbitMQ 是 Erlang 语言编写的，所以在安装 RabbitMQ 前，还是需要安装 Erlang 的。<br>首先在系统中添加 Erlang 库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb</span><br><span class=\"line\">sudo dpkg -i erlang-solutions_1.0_all.deb</span><br></pre></td></tr></table></figure>\n\n<p>接着</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install erlang erlang-nox</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、安装-RabbitMQ\"><a href=\"#二、安装-RabbitMQ\" class=\"headerlink\" title=\"二、安装 RabbitMQ\"></a>二、安装 RabbitMQ</h3><p>需要先在系统中加入 rabbitmq apt 仓库，再加入 rabbitmq signing key。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list</span><br><span class=\"line\">wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>这样就安装完成，在安装的过程中我并没有遇到什么问题、困难（没啥坑）</p>\n<h3 id=\"三、启用-RabbitMQ-Web-管理插件\"><a href=\"#三、启用-RabbitMQ-Web-管理插件\" class=\"headerlink\" title=\"三、启用 RabbitMQ Web 管理插件\"></a>三、启用 RabbitMQ Web 管理插件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n<p>重启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>http://localhost:15672</code> ，默认账户、密码 <code>guest/guest</code>（图就不贴了。。编辑器没法获取粘贴板的图片。。）</p>\n<p>这里我遇到一个坑。。。<br>会出现：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=ERROR REPORT==== 10-Jun-2014::10:27:17 ===</span><br><span class=\"line\">webmachine error: path=\"/api/whoami\"</span><br><span class=\"line\">\"Unauthorized\"</span><br></pre></td></tr></table></figure>\n\n<p>解决的办法：</p>\n<ol>\n<li><p>Add a new/fresh user, say user ‘test’ and password ‘test’</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user test test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Give administrative access to the new access</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set_user_tags test administrator</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Set permission to newly created user</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set_permissions -p / test \".*\" \".*\" \".*\"</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>下载好 rabbitmq 之后，在 <code>/etc/rabbitmq</code> 目录下面默认没有配置文件，需要单独下载，<a href=\"https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>下载完成后重命名为 <code>rabbitmq.config</code>，接着找到 <code>lookback_users</code> 的地方去掉注释，修改好后的 <code>rabbitmq.config</code> 放置在 <code>/etc/rabbitmq</code> 目录下面</p>\n<p>然后重启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在其他地址下登录</p>\n","site":{"data":{}},"excerpt":"","more":"<p>公司使用 RabbitMQ 来作消息队列，所以还是有必要学习以下 RabbitMQ 的（之前只有听说过没有接触过，所以还是趁早学比较好，😄）<br>本文参考：安装：<a href=\"https://blog.csdn.net/nextyu/article/details/79250174\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/nextyu/article/details/79250174</a> <br><br>错误：<a href=\"https://mysteps4learning.wordpress.com/2014/06/10/how-to-resolve-error-unauthorized-while-logging-to-rabbitmq-web-management/\" target=\"_blank\" rel=\"noopener\">https://mysteps4learning.wordpress.com/2014/06/10/how-to-resolve-error-unauthorized-while-logging-to-rabbitmq-web-management/</a></p>\n<h3 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h3><p>Ubuntu 16.04</p>\n<h3 id=\"一、安装-Erlang\"><a href=\"#一、安装-Erlang\" class=\"headerlink\" title=\"一、安装 Erlang\"></a>一、安装 Erlang</h3><p>因为 RabbitMQ 是 Erlang 语言编写的，所以在安装 RabbitMQ 前，还是需要安装 Erlang 的。<br>首先在系统中添加 Erlang 库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb</span><br><span class=\"line\">sudo dpkg -i erlang-solutions_1.0_all.deb</span><br></pre></td></tr></table></figure>\n\n<p>接着</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install erlang erlang-nox</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、安装-RabbitMQ\"><a href=\"#二、安装-RabbitMQ\" class=\"headerlink\" title=\"二、安装 RabbitMQ\"></a>二、安装 RabbitMQ</h3><p>需要先在系统中加入 rabbitmq apt 仓库，再加入 rabbitmq signing key。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list</span><br><span class=\"line\">wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>这样就安装完成，在安装的过程中我并没有遇到什么问题、困难（没啥坑）</p>\n<h3 id=\"三、启用-RabbitMQ-Web-管理插件\"><a href=\"#三、启用-RabbitMQ-Web-管理插件\" class=\"headerlink\" title=\"三、启用 RabbitMQ Web 管理插件\"></a>三、启用 RabbitMQ Web 管理插件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n<p>重启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>http://localhost:15672</code> ，默认账户、密码 <code>guest/guest</code>（图就不贴了。。编辑器没法获取粘贴板的图片。。）</p>\n<p>这里我遇到一个坑。。。<br>会出现：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=ERROR REPORT==== 10-Jun-2014::10:27:17 ===</span><br><span class=\"line\">webmachine error: path=\"/api/whoami\"</span><br><span class=\"line\">\"Unauthorized\"</span><br></pre></td></tr></table></figure>\n\n<p>解决的办法：</p>\n<ol>\n<li><p>Add a new/fresh user, say user ‘test’ and password ‘test’</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl add_user test test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Give administrative access to the new access</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set_user_tags test administrator</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Set permission to newly created user</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set_permissions -p / test \".*\" \".*\" \".*\"</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>下载好 rabbitmq 之后，在 <code>/etc/rabbitmq</code> 目录下面默认没有配置文件，需要单独下载，<a href=\"https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>下载完成后重命名为 <code>rabbitmq.config</code>，接着找到 <code>lookback_users</code> 的地方去掉注释，修改好后的 <code>rabbitmq.config</code> 放置在 <code>/etc/rabbitmq</code> 目录下面</p>\n<p>然后重启服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在其他地址下登录</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjwvyuldf0006vizqtny9o4b1","tag_id":"cjwvyuldh0008vizq5rrvy442","_id":"cjwvyuldo000bvizqxb8ez97i"}],"Tag":[{"name":"数据库","_id":"cjwvyuldh0008vizq5rrvy442"}]}}